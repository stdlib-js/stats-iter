{"version":3,"file":"index.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-read-only-property/lib/index.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/re.js","../node_modules/@stdlib/assert-is-boolean/lib/primitive.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/utils-native-class/lib/native_class.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/assert-has-own-property/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js","../node_modules/@stdlib/assert-is-boolean/lib/tostring.js","../node_modules/@stdlib/assert-is-boolean/lib/object.js","../node_modules/@stdlib/assert-is-boolean/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/index.js","../node_modules/@stdlib/utils-global/lib/codegen.js","../node_modules/@stdlib/utils-global/lib/self.js","../node_modules/@stdlib/utils-global/lib/window.js","../node_modules/@stdlib/utils-global/lib/global.js","../node_modules/@stdlib/utils-global/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js","../node_modules/@stdlib/utils-global/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js","../node_modules/@stdlib/utils-type-of/lib/check.js","../node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/assert-tools-array-function/lib/arrayfcn.js","../node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/typeof.js","../node_modules/@stdlib/utils-constructor-name/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/polyfill.js","../node_modules/@stdlib/utils-type-of/lib/index.js","../node_modules/@stdlib/assert-is-function/lib/main.js","../node_modules/@stdlib/assert-is-function/lib/index.js","../node_modules/@stdlib/assert-is-iterator-like/lib/main.js","../node_modules/@stdlib/assert-is-iterator-like/lib/index.js","../node_modules/@stdlib/assert-has-iterator-symbol-support/lib/main.js","../node_modules/@stdlib/symbol-iterator/lib/index.js","../node_modules/@stdlib/symbol-iterator/lib/main.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/array-uint32/lib/uint32array.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/index.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/array-float64/lib/float64array.js","../node_modules/@stdlib/assert-has-float64array-support/lib/index.js","../node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/array-uint8/lib/uint8array.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/index.js","../node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/array-uint16/lib/uint16array.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/index.js","../node_modules/@stdlib/assert-is-little-endian/lib/index.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/index.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/index.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/index.js","../node_modules/@stdlib/number-ctor/lib/index.js","../node_modules/@stdlib/number-ctor/lib/number.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-ln/lib/ln.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-ln/lib/index.js","../node_modules/@stdlib/math-base-special-floor/lib/index.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-special-ceil/lib/main.js","../node_modules/@stdlib/math-base-special-trunc/lib/main.js","../node_modules/@stdlib/math-base-special-trunc/lib/index.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/index.js","../node_modules/@stdlib/number-float64-base-to-words/lib/to_words.js","../node_modules/@stdlib/number-float64-base-to-words/lib/main.js","../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-to-words/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/main.js","../node_modules/@stdlib/math-base-special-copysign/lib/main.js","../node_modules/@stdlib/number-float64-base-from-words/lib/index.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/math-base-special-abs/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/normalize.js","../node_modules/@stdlib/number-float64-base-normalize/lib/main.js","../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js","../node_modules/@stdlib/number-float64-base-exponent/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js","../node_modules/@stdlib/math-base-special-ldexp/lib/main.js","../node_modules/@stdlib/number-float64-base-normalize/lib/index.js","../node_modules/@stdlib/number-float64-base-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/math-base-special-ldexp/lib/index.js","../node_modules/@stdlib/math-base-special-exp/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-exp/lib/expmulti.js","../node_modules/@stdlib/math-base-special-exp/lib/exp.js","../node_modules/@stdlib/stats-incr-gmean/lib/main.js","../node_modules/@stdlib/stats-iter-cugmean/lib/main.js","../node_modules/@stdlib/stats-incr-gmean/lib/index.js","../node_modules/@stdlib/stats-iter-cugmean/lib/index.js","../node_modules/@stdlib/stats-incr-mean/lib/main.js","../node_modules/@stdlib/stats-incr-hmean/lib/main.js","../node_modules/@stdlib/stats-incr-mean/lib/index.js","../node_modules/@stdlib/stats-iter-cuhmean/lib/main.js","../node_modules/@stdlib/stats-incr-hmean/lib/index.js","../node_modules/@stdlib/stats-iter-cuhmean/lib/index.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/index.js","../node_modules/@stdlib/stats-incr-max/lib/main.js","../node_modules/@stdlib/stats-iter-cumax/lib/main.js","../node_modules/@stdlib/stats-incr-max/lib/index.js","../node_modules/@stdlib/stats-iter-cumax/lib/index.js","../node_modules/@stdlib/stats-incr-maxabs/lib/main.js","../node_modules/@stdlib/stats-iter-cumaxabs/lib/main.js","../node_modules/@stdlib/stats-incr-maxabs/lib/index.js","../node_modules/@stdlib/stats-iter-cumaxabs/lib/index.js","../node_modules/@stdlib/stats-iter-cumean/lib/main.js","../node_modules/@stdlib/stats-iter-cumean/lib/index.js","../node_modules/@stdlib/stats-incr-meanabs/lib/main.js","../node_modules/@stdlib/stats-iter-cumeanabs/lib/main.js","../node_modules/@stdlib/stats-incr-meanabs/lib/index.js","../node_modules/@stdlib/stats-iter-cumeanabs/lib/index.js","../node_modules/@stdlib/stats-incr-meanabs2/lib/main.js","../node_modules/@stdlib/stats-iter-cumeanabs2/lib/main.js","../node_modules/@stdlib/stats-incr-meanabs2/lib/index.js","../node_modules/@stdlib/stats-iter-cumeanabs2/lib/index.js","../node_modules/@stdlib/stats-incr-midrange/lib/main.js","../node_modules/@stdlib/stats-iter-cumidrange/lib/main.js","../node_modules/@stdlib/stats-incr-midrange/lib/index.js","../node_modules/@stdlib/stats-iter-cumidrange/lib/index.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/index.js","../node_modules/@stdlib/stats-incr-min/lib/main.js","../node_modules/@stdlib/stats-iter-cumin/lib/main.js","../node_modules/@stdlib/stats-incr-min/lib/index.js","../node_modules/@stdlib/stats-iter-cumin/lib/index.js","../node_modules/@stdlib/stats-incr-minabs/lib/main.js","../node_modules/@stdlib/stats-iter-cuminabs/lib/main.js","../node_modules/@stdlib/stats-incr-minabs/lib/index.js","../node_modules/@stdlib/stats-iter-cuminabs/lib/index.js","../node_modules/@stdlib/math-base-special-frexp/lib/frexp.js","../node_modules/@stdlib/math-base-special-frexp/lib/main.js","../node_modules/@stdlib/math-base-special-frexp/lib/index.js","../node_modules/@stdlib/stats-incr-prod/lib/main.js","../node_modules/@stdlib/stats-incr-prod/lib/index.js","../node_modules/@stdlib/stats-iter-cuprod/lib/main.js","../node_modules/@stdlib/stats-iter-cuprod/lib/index.js","../node_modules/@stdlib/stats-incr-range/lib/main.js","../node_modules/@stdlib/stats-incr-range/lib/index.js","../node_modules/@stdlib/stats-iter-curange/lib/main.js","../node_modules/@stdlib/stats-iter-curange/lib/index.js","../node_modules/@stdlib/stats-incr-sum/lib/main.js","../node_modules/@stdlib/stats-incr-sum/lib/index.js","../node_modules/@stdlib/stats-iter-cusum/lib/main.js","../node_modules/@stdlib/stats-iter-cusum/lib/index.js","../node_modules/@stdlib/stats-incr-sumabs/lib/main.js","../node_modules/@stdlib/stats-incr-sumabs/lib/index.js","../node_modules/@stdlib/stats-iter-cusumabs/lib/main.js","../node_modules/@stdlib/stats-iter-cusumabs/lib/index.js","../node_modules/@stdlib/stats-incr-sumabs2/lib/main.js","../node_modules/@stdlib/stats-incr-sumabs2/lib/index.js","../node_modules/@stdlib/stats-iter-cusumabs2/lib/main.js","../node_modules/@stdlib/stats-iter-cusumabs2/lib/index.js","../node_modules/@stdlib/stats-iter-max/lib/main.js","../node_modules/@stdlib/stats-iter-max/lib/index.js","../node_modules/@stdlib/stats-iter-maxabs/lib/main.js","../node_modules/@stdlib/stats-iter-maxabs/lib/index.js","../node_modules/@stdlib/stats-iter-mean/lib/main.js","../node_modules/@stdlib/stats-iter-mean/lib/index.js","../node_modules/@stdlib/stats-iter-meanabs/lib/main.js","../node_modules/@stdlib/stats-iter-meanabs/lib/index.js","../node_modules/@stdlib/stats-iter-meanabs2/lib/main.js","../node_modules/@stdlib/stats-iter-meanabs2/lib/index.js","../node_modules/@stdlib/stats-iter-midrange/lib/main.js","../node_modules/@stdlib/stats-iter-midrange/lib/index.js","../node_modules/@stdlib/stats-iter-min/lib/main.js","../node_modules/@stdlib/stats-iter-min/lib/index.js","../node_modules/@stdlib/stats-iter-minabs/lib/main.js","../node_modules/@stdlib/stats-iter-minabs/lib/index.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/is_integer.js","../node_modules/@stdlib/assert-is-integer/lib/integer.js","../node_modules/@stdlib/assert-is-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-integer/lib/object.js","../node_modules/@stdlib/assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/index.js","../node_modules/@stdlib/assert-is-positive-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-positive-integer/lib/object.js","../node_modules/@stdlib/assert-is-positive-integer/lib/main.js","../node_modules/@stdlib/assert-is-positive-integer/lib/index.js","../node_modules/@stdlib/stats-incr-mmax/lib/main.js","../node_modules/@stdlib/stats-iter-mmax/lib/main.js","../node_modules/@stdlib/stats-incr-mmax/lib/index.js","../node_modules/@stdlib/stats-iter-mmax/lib/index.js","../node_modules/@stdlib/stats-incr-mmaxabs/lib/main.js","../node_modules/@stdlib/stats-iter-mmaxabs/lib/main.js","../node_modules/@stdlib/stats-incr-mmaxabs/lib/index.js","../node_modules/@stdlib/stats-iter-mmaxabs/lib/index.js","../node_modules/@stdlib/stats-incr-mmean/lib/main.js","../node_modules/@stdlib/stats-iter-mmean/lib/main.js","../node_modules/@stdlib/stats-incr-mmean/lib/index.js","../node_modules/@stdlib/stats-iter-mmean/lib/index.js","../node_modules/@stdlib/stats-incr-mmeanabs/lib/main.js","../node_modules/@stdlib/stats-iter-mmeanabs/lib/main.js","../node_modules/@stdlib/stats-incr-mmeanabs/lib/index.js","../node_modules/@stdlib/stats-iter-mmeanabs/lib/index.js","../node_modules/@stdlib/stats-incr-mmeanabs2/lib/main.js","../node_modules/@stdlib/stats-iter-mmeanabs2/lib/main.js","../node_modules/@stdlib/stats-incr-mmeanabs2/lib/index.js","../node_modules/@stdlib/stats-iter-mmeanabs2/lib/index.js","../node_modules/@stdlib/stats-incr-mmidrange/lib/main.js","../node_modules/@stdlib/stats-iter-mmidrange/lib/main.js","../node_modules/@stdlib/stats-incr-mmidrange/lib/index.js","../node_modules/@stdlib/stats-iter-mmidrange/lib/index.js","../node_modules/@stdlib/stats-incr-mmin/lib/main.js","../node_modules/@stdlib/stats-iter-mmin/lib/main.js","../node_modules/@stdlib/stats-incr-mmin/lib/index.js","../node_modules/@stdlib/stats-iter-mmin/lib/index.js","../node_modules/@stdlib/stats-incr-mminabs/lib/main.js","../node_modules/@stdlib/stats-iter-mminabs/lib/main.js","../node_modules/@stdlib/stats-incr-mminabs/lib/index.js","../node_modules/@stdlib/stats-iter-mminabs/lib/index.js","../node_modules/@stdlib/stats-incr-mprod/lib/main.js","../node_modules/@stdlib/stats-iter-mprod/lib/main.js","../node_modules/@stdlib/stats-incr-mprod/lib/index.js","../node_modules/@stdlib/stats-iter-mprod/lib/index.js","../node_modules/@stdlib/stats-incr-mrange/lib/main.js","../node_modules/@stdlib/stats-iter-mrange/lib/main.js","../node_modules/@stdlib/stats-incr-mrange/lib/index.js","../node_modules/@stdlib/stats-iter-mrange/lib/index.js","../node_modules/@stdlib/stats-incr-msum/lib/main.js","../node_modules/@stdlib/stats-iter-msum/lib/main.js","../node_modules/@stdlib/stats-incr-msum/lib/index.js","../node_modules/@stdlib/stats-iter-msum/lib/index.js","../node_modules/@stdlib/stats-incr-msumabs/lib/main.js","../node_modules/@stdlib/stats-iter-msumabs/lib/main.js","../node_modules/@stdlib/stats-incr-msumabs/lib/index.js","../node_modules/@stdlib/stats-iter-msumabs/lib/index.js","../node_modules/@stdlib/stats-incr-msumabs2/lib/main.js","../node_modules/@stdlib/stats-iter-msumabs2/lib/main.js","../node_modules/@stdlib/stats-incr-msumabs2/lib/index.js","../node_modules/@stdlib/stats-iter-msumabs2/lib/index.js","../node_modules/@stdlib/stats-iter-prod/lib/main.js","../node_modules/@stdlib/stats-iter-prod/lib/index.js","../node_modules/@stdlib/stats-iter-range/lib/main.js","../node_modules/@stdlib/stats-iter-range/lib/index.js","../node_modules/@stdlib/math-base-special-sqrt/lib/main.js","../node_modules/@stdlib/stats-incr-stdev/lib/main.js","../node_modules/@stdlib/stats-iter-stdev/lib/main.js","../node_modules/@stdlib/stats-incr-stdev/lib/index.js","../node_modules/@stdlib/stats-iter-stdev/lib/index.js","../node_modules/@stdlib/stats-iter-sum/lib/main.js","../node_modules/@stdlib/stats-iter-sum/lib/index.js","../node_modules/@stdlib/stats-iter-sumabs/lib/main.js","../node_modules/@stdlib/stats-iter-sumabs/lib/index.js","../node_modules/@stdlib/stats-iter-sumabs2/lib/main.js","../node_modules/@stdlib/stats-iter-sumabs2/lib/index.js","../node_modules/@stdlib/stats-incr-variance/lib/main.js","../node_modules/@stdlib/stats-iter-variance/lib/main.js","../node_modules/@stdlib/stats-incr-variance/lib/index.js","../node_modules/@stdlib/stats-iter-variance/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( './define_property.js' );\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nmodule.exports = defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nmodule.exports = defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* var defineProperty = require( '@stdlib/utils-define-property' );\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nvar hasDefinePropertySupport = require( './has_define_property_support.js' );\nvar builtin = require( './builtin.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nmodule.exports = setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define a read-only property.\n*\n* @module @stdlib/utils-define-read-only-property\n*\n* @example\n* var setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n*\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nmodule.exports = setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define a non-enumerable read-only property.\n*\n* @module @stdlib/utils-define-nonenumerable-read-only-property\n*\n* @example\n* var setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\n*\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\n\n// MODULES //\n\nvar setNonEnumerableReadOnly = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar RE = /./;\n\n\n// EXPORTS //\n\nmodule.exports = RE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a boolean primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean primitive\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( true ) );\n* // returns false\n*/\nfunction isBoolean( value ) {\n\treturn ( typeof value === 'boolean' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasSymbols = require( '@stdlib/assert-has-symbol-support' );\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `toStringTag` support.\n*\n* @module @stdlib/assert-has-tostringtag-support\n*\n* @example\n* var hasToStringTagSupport = require( '@stdlib/assert-has-tostringtag-support' );\n*\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasToStringTagSupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nmodule.exports = toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toStr = require( './tostring.js' );\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether an object has a specified property.\n*\n* @module @stdlib/assert-has-own-property\n*\n* @example\n* var hasOwnProp = require( '@stdlib/assert-has-own-property' );\n*\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* bool = hasOwnProp( beep, 'bop' );\n* // returns false\n*/\n\n// MODULES //\n\nvar hasOwnProp = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nmodule.exports = toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar toStringTag = require( './tostringtag.js' );\nvar toStr = require( './tostring.js' );\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* var nativeClass = require( '@stdlib/utils-native-class' );\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nvar hasToStringTag = require( '@stdlib/assert-has-tostringtag-support' );\nvar builtin = require( './native_class.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar nativeClass;\nif ( hasToStringTag() ) {\n\tnativeClass = polyfill;\n} else {\n\tnativeClass = builtin;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toString = require( './tostring.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Boolean.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nmodule.exports = toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasToStringTag = require( '@stdlib/assert-has-tostringtag-support' );\nvar nativeClass = require( '@stdlib/utils-native-class' );\nvar test = require( './try2serialize.js' );\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean object\n*\n* @example\n* var bool = isBoolean( true );\n* // returns false\n*\n* @example\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Boolean ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Boolean]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a boolean\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( true ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a boolean.\n*\n* @module @stdlib/assert-is-boolean\n*\n* @example\n* var isBoolean = require( '@stdlib/assert-is-boolean' );\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* // Use interface to check for boolean primitives...\n* var isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( true ) );\n* // returns false\n*\n* @example\n* // Use interface to check for boolean objects...\n* var isBoolean = require( '@stdlib/assert-is-boolean' ).isObject;\n*\n* var bool = isBoolean( true );\n* // returns false\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isBoolean = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( isBoolean, 'isPrimitive', isPrimitive );\nsetReadOnly( isBoolean, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the global object using code generation.\n*\n* @private\n* @returns {Object} global object\n*/\nfunction getGlobal() {\n\treturn new Function( 'return this;' )(); // eslint-disable-line no-new-func\n}\n\n\n// EXPORTS //\n\nmodule.exports = getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof self === 'object' ) ? self : null;\n\n\n// EXPORTS //\n\nmodule.exports = obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof window === 'object' ) ? window : null;\n\n\n// EXPORTS //\n\nmodule.exports = obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof global === 'object' ) ? global : null;\n\n\n// EXPORTS //\n\nmodule.exports = obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar getThis = require( './codegen.js' );\nvar Self = require( './self.js' );\nvar Win = require( './window.js' );\nvar Global = require( './global.js' );\n\n\n// MAIN //\n\n/**\n* Returns the global object.\n*\n* ## Notes\n*\n* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.\n*\n* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object\n* @throws {TypeError} must provide a boolean\n* @throws {Error} unable to resolve global object\n* @returns {Object} global object\n*\n* @example\n* var g = getGlobal();\n* // returns {...}\n*/\nfunction getGlobal( codegen ) {\n\tif ( arguments.length ) {\n\t\tif ( !isBoolean( codegen ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a boolean primitive. Value: `'+codegen+'`.' );\n\t\t}\n\t\tif ( codegen ) {\n\t\t\treturn getThis();\n\t\t}\n\t\t// Fall through...\n\t}\n\t// Case: browsers and web workers\n\tif ( Self ) {\n\t\treturn Self;\n\t}\n\t// Case: browsers\n\tif ( Win ) {\n\t\treturn Win;\n\t}\n\t// Case: Node.js\n\tif ( Global ) {\n\t\treturn Global;\n\t}\n\t// Case: unknown\n\tthrow new Error( 'unexpected error. Unable to resolve global object.' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getGlobal = require( '@stdlib/utils-global' );\n\n\n// MAIN //\n\nvar root = getGlobal();\nvar nodeList = root.document && root.document.childNodes;\n\n\n// EXPORTS //\n\nmodule.exports = nodeList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the global object.\n*\n* @module @stdlib/utils-global\n*\n* @example\n* var getGlobal = require( '@stdlib/utils-global' );\n*\n* var g = getGlobal();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar getGlobal = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar typedarray = Int8Array; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = typedarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar RE = require( './fixtures/re.js' );\nvar nodeList = require( './fixtures/nodelist.js' );\nvar typedarray = require( './fixtures/typedarray.js' );\n\n\n// MAIN //\n\n/**\n* Checks whether a polyfill is needed when using the `typeof` operator.\n*\n* @private\n* @returns {boolean} boolean indicating whether a polyfill is needed\n*/\nfunction check() {\n\tif (\n\t\t// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\t\ttypeof RE === 'function' ||\n\n\t\t// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):\n\t\ttypeof typedarray === 'object' ||\n\n\t\t// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):\n\t\ttypeof nodeList === 'function'\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nmodule.exports = check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* var reFunctionName = require( '@stdlib/regexp-function-name' );\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar reFunctionName = require( './main.js' );\nvar REGEXP = require( './regexp.js' );\n\n\n// MAIN //\n\nsetReadOnly( reFunctionName, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nmodule.exports = reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar reFunctionName = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nmodule.exports = RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nmodule.exports = f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* var isOdd = require( '@stdlib/assert-is-odd' );\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a function. Value: `' + predicate + '`.' );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* var isObjectLike = require( '@stdlib/assert-is-object-like' );\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* var isObjectLike = require( '@stdlib/assert-is-object-like' ).isObjectLikeArray;\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar arrayfun = require( '@stdlib/assert-tools-array-function' );\nvar isObjectLike = require( './main.js' );\n\n\n// MAIN //\n\nsetReadOnly( isObjectLike, 'isObjectLikeArray', arrayfun( isObjectLike ) );\n\n\n// EXPORTS //\n\nmodule.exports = isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\nvar RE = require( '@stdlib/regexp-function-name' ).REGEXP;\nvar isBuffer = require( '@stdlib/assert-is-buffer' );\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nmodule.exports = constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ctorName = require( '@stdlib/utils-constructor-name' );\n\n\n// NOTES //\n\n/*\n* Built-in `typeof` operator behavior:\n*\n* ```text\n* typeof null => 'object'\n* typeof undefined => 'undefined'\n* typeof 'a' => 'string'\n* typeof 5 => 'number'\n* typeof NaN => 'number'\n* typeof true => 'boolean'\n* typeof false => 'boolean'\n* typeof {} => 'object'\n* typeof [] => 'object'\n* typeof function foo(){} => 'function'\n* typeof function* foo(){} => 'object'\n* typeof Symbol() => 'symbol'\n* ```\n*\n*/\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\tvar type;\n\n\t// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):\n\tif ( v === null ) {\n\t\treturn 'null';\n\t}\n\ttype = typeof v;\n\n\t// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.\n\tif ( type === 'object' ) {\n\t\treturn ctorName( v ).toLowerCase();\n\t}\n\treturn type;\n}\n\n\n// EXPORTS //\n\nmodule.exports = typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the name of a value's constructor.\n*\n* @module @stdlib/utils-constructor-name\n*\n* @example\n* var constructorName = require( '@stdlib/utils-constructor-name' );\n*\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* v = constructorName( {} );\n* // returns 'Object'\n*\n* v = constructorName( true );\n* // returns 'Boolean'\n*/\n\n// MODULES //\n\nvar constructorName = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ctorName = require( '@stdlib/utils-constructor-name' );\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\treturn ctorName( v ).toLowerCase();\n}\n\n\n// EXPORTS //\n\nmodule.exports = typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine a value's type.\n*\n* @module @stdlib/utils-type-of\n*\n* @example\n* var typeOf = require( '@stdlib/utils-type-of' );\n*\n* var str = typeOf( 'a' );\n* // returns 'string'\n*\n* str = typeOf( 5 );\n* // returns 'number'\n*/\n\n// MODULES //\n\nvar usePolyfill = require( './check.js' );\nvar typeOf = require( './typeof.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar main = ( usePolyfill() ) ? polyfill : typeOf;\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar typeOf = require( '@stdlib/utils-type-of' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a function.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a function\n*\n* @example\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\nfunction isFunction( value ) {\n\t// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.\n\treturn ( typeOf( value ) === 'function' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a function.\n*\n* @module @stdlib/assert-is-function\n*\n* @example\n* var isFunction = require( '@stdlib/assert-is-function' );\n*\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\n\n// MODULES //\n\nvar isFunction = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is iterator-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is iterator-like\n*\n* @example\n* var it = {\n*     'next': function noop() {}\n* };\n* var bool = isIteratorLike( it );\n* // returns true\n*\n* @example\n* var bool = isIteratorLike( {} );\n* // returns false\n*\n* @example\n* var bool = isIteratorLike( null );\n* // returns false\n*/\nfunction isIteratorLike( value ) {\n\tvar t = typeof value;\n\treturn (\n\t\tvalue !== null &&\n\t\t( t === 'object' || t === 'function' ) &&\n\t\tisFunction( value.next )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isIteratorLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is iterator-like.\n*\n* @module @stdlib/assert-is-iterator-like\n*\n* @example\n* var isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\n*\n* var it = {\n*     'next': function noop() {}\n* };\n* var bool = isIteratorLike( it );\n* // returns true\n*\n* bool = isIteratorLike( {} );\n* // returns false\n*/\n\n// MODULES //\n\nvar isIterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Symbol.iterator` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support\n*\n* @example\n* var bool = hasIteratorSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasIteratorSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol' &&\n\t\thasOwnProp( Symbol, 'iterator' ) &&\n\t\ttypeof Symbol.iterator === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasIteratorSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Iterator symbol.\n*\n* @module @stdlib/symbol-iterator\n*\n* @example\n* var IteratorSymbol = require( '@stdlib/symbol-iterator' );\n*\n* function iterator() {\n*     var it;\n*     var i;\n*\n*     i = -1;\n*\n*     it = {};\n*     it.next = next;\n*     it.return = done;\n*\n*     if ( IteratorSymbol ) {\n*         it[ IteratorSymbol ] = iterator;\n*     }\n*     return it;\n*\n*     function next() {\n*         i += 1;\n*         return {\n*             'value': i,\n*             'done': false\n*         };\n*     }\n*\n*     function done( value ) {\n*         if ( arguments.length === 0 ) {\n*             return {\n*                 'done': true\n*             };\n*         }\n*         return {\n*             'value': value,\n*             'done': true\n*         };\n*     }\n* }\n*\n* var obj = iterator();\n*/\n\n// MAIN //\n\nvar IteratorSymbol = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = IteratorSymbol;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasIteratorSymbolSupport = require( '@stdlib/assert-has-iterator-symbol-support' );\n\n\n// MAIN //\n\n/**\n* Iterator symbol.\n*\n* @name IteratorSymbol\n* @constant\n* @type {(symbol|null)}\n*\n* @example\n* function iterator() {\n*     var it;\n*     var i;\n*\n*     i = -1;\n*\n*     it = {};\n*     it.next = next;\n*     it.return = done;\n*\n*     if ( IteratorSymbol ) {\n*         it[ IteratorSymbol ] = iterator;\n*     }\n*     return it;\n*\n*     function next() {\n*         i += 1;\n*         return {\n*             'value': i,\n*             'done': false\n*         };\n*     }\n*\n*     function done( value ) {\n*         if ( arguments.length === 0 ) {\n*             return {\n*                 'done': true\n*             };\n*         }\n*         return {\n*             'value': value,\n*             'done': true\n*         };\n*     }\n* }\n*\n* var obj = iterator();\n*/\nvar IteratorSymbol = ( hasIteratorSymbolSupport() ) ? Symbol.iterator : null;\n\n\n// EXPORTS //\n\nmodule.exports = IteratorSymbol;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar UINT32_MAX = require( '@stdlib/constants-uint32-max' );\nvar GlobalUint32Array = require( './uint32array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* var ctor = require( '@stdlib/array-uint32' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nvar hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );\nvar builtin = require( './uint32array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint32Array` support.\n*\n* @module @stdlib/assert-has-uint32array-support\n*\n* @example\n* var hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );\n*\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint32ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat64Array = require( '@stdlib/assert-is-float64array' );\nvar GlobalFloat64Array = require( './float64array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* var ctor = require( '@stdlib/array-float64' );\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );\nvar builtin = require( './float64array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Float64Array` support.\n*\n* @module @stdlib/assert-has-float64array-support\n*\n* @example\n* var hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );\n*\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasFloat64ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint8Array = require( '@stdlib/assert-is-uint8array' );\nvar UINT8_MAX = require( '@stdlib/constants-uint8-max' );\nvar GlobalUint8Array = require( './uint8array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* var ctor = require( '@stdlib/array-uint8' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nvar hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );\nvar builtin = require( './uint8array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint8Array` support.\n*\n* @module @stdlib/assert-has-uint8array-support\n*\n* @example\n* var hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );\n*\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint8ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint16Array = require( '@stdlib/assert-is-uint16array' );\nvar UINT16_MAX = require( '@stdlib/constants-uint16-max' );\nvar GlobalUint16Array = require( './uint16array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ctors = require( './ctors.js' );\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* var ctor = require( '@stdlib/array-uint16' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nvar hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );\nvar builtin = require( './uint16array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar Uint16Array = require( '@stdlib/array-uint16' );\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nmodule.exports = ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint16Array` support.\n*\n* @module @stdlib/assert-has-uint16array-support\n*\n* @example\n* var hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );\n*\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint16ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a boolean indicating if an environment is little endian.\n*\n* @module @stdlib/assert-is-little-endian\n*\n* @example\n* var IS_LITTLE_ENDIAN = require( '@stdlib/assert-is-little-endian' );\n*\n* var bool = IS_LITTLE_ENDIAN;\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = IS_LITTLE_ENDIAN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-get-high-word\n*\n* @example\n* var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\n*\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\n\n// MODULES //\n\nvar getHighWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* var PINF = require( '@stdlib/constants-float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-set-high-word\n*\n* @example\n* var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\n*\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\n* var PINF = require( '@stdlib/constants-float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar setHighWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is `NaN`.\n*\n* @module @stdlib/math-base-assert-is-nan\n*\n* @example\n* var isnan = require( '@stdlib/math-base-assert-is-nan' );\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 7.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isnan = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor which returns a `Number` object.\n*\n* @module @stdlib/number-ctor\n*\n* @example\n* var Number = require( '@stdlib/number-ctor' );\n*\n* var v = new Number( 10.0 );\n* // returns <Number>\n*/\n\n// MODULES //\n\nvar Number = require( './number.js' );\n\n\n// EXPORTS //\n\nmodule.exports = Number;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* var FLOAT64_NINF = require( '@stdlib/constants-float64-ninf' );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar Number = require( '@stdlib/number-ctor' );\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar polyvalP = require( './polyval_p.js' );\nvar polyvalQ = require( './polyval_q.js' );\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln( x ) {\n\tvar hfsq;\n\tvar hx;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: 0 < x < 2**-1022\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up `x`:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( ( hx>>20 ) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += ( i>>20 )|0; // asm type annotation\n\tf = x - 1.0;\n\tif ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn (k * LN2_HI) + (k * LN2_LO);\n\t\t}\n\t\tR = f * f * ( 0.5 - (ONE_THIRD*f) );\n\t\tif ( k === 0 ) {\n\t\t\treturn f - R;\n\t\t}\n\t\treturn (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\tif ( k === 0 ) {\n\t\t\treturn f - ( hfsq - (s * (hfsq+R)) );\n\t\t}\n\t\treturn (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );\n\t}\n\tif ( k === 0 ) {\n\t\treturn f - (s*(f-R));\n\t}\n\treturn (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm.\n*\n* @module @stdlib/math-base-special-ln\n*\n* @example\n* var ln = require( '@stdlib/math-base-special-ln' );\n*\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* v = ln( 0.0 );\n* // returns -Infinity\n*\n* v = ln( Infinity );\n* // returns Infinity\n*\n* v = ln( NaN );\n* // returns NaN\n*\n* v = ln( -4.0 );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar ln = require( './ln.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Round a double-precision floating-point number toward negative infinity.\n*\n* @module @stdlib/math-base-special-floor\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* v = floor( 9.99999 );\n* // returns 9.0\n*\n* v = floor( 0.0 );\n* // returns 0.0\n*\n* v = floor( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar floor = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nmodule.exports = floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceil( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceil( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceil( NaN );\n* // returns NaN\n*/\nvar ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nmodule.exports = ceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = trunc( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = trunc( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = trunc( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = trunc( NaN );\n* // returns NaN\n*\n* @example\n* var v = trunc( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = trunc( -Infinity );\n* // returns -Infinity\n*/\nfunction trunc( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn ceil( x );\n\t}\n\treturn floor( x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = trunc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Round a double-precision floating-point number toward zero.\n*\n* @module @stdlib/math-base-special-trunc\n*\n* @example\n* var trunc = require( '@stdlib/math-base-special-trunc' );\n*\n* var v = trunc( -4.2 );\n* // returns -4.0\n*\n* v = trunc( 9.99999 );\n* // returns 9.0\n*\n* v = trunc( 0.0 );\n* // returns 0.0\n*\n* v = trunc( -0.0 );\n* // returns -0.0\n*\n* v = trunc( NaN );\n* // returns NaN\n*\n* v = trunc( Infinity );\n* // returns Infinity\n*\n* v = trunc( -Infinity );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar trunc = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = trunc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* var FLOAT64_PINF = require( '@stdlib/constants-float64-pinf' );\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is infinite.\n*\n* @module @stdlib/math-base-assert-is-infinite\n*\n* @example\n* var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\n*\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* bool = isInfinite( -Infinity );\n* // returns true\n*\n* bool = isInfinite( 5.0 );\n* // returns false\n*\n* bool = isInfinite( NaN );\n* // returns false\n*/\n\n// MODULES //\n\nvar isInfinite = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( out, x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ 0 ] = UINT32_VIEW[ HIGH ];\n\tout[ 1 ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './to_words.js' );\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* var toWords = require( '@stdlib/number-float64-base-to-words' );\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n* var toWords = require( '@stdlib/number-float64-base-to-words' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar toWords = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// 10000000000000000000000000000000 => 2147483648 => 0x80000000\nvar SIGN_MASK = 0x80000000>>>0; // asm type annotation\n\n// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff\nvar MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords( WORDS, x );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= MAGNITUDE_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = copysign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-from-words\n*\n* @example\n* var fromWords = require( '@stdlib/number-float64-base-from-words' );\n*\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar fromWords = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an absolute value of a double-precision floating-point number.\n*\n* @module @stdlib/math-base-special-abs\n*\n* @example\n* var abs = require( '@stdlib/math-base-special-abs' );\n*\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* v = abs( 2.0 );\n* // returns 2.0\n*\n* v = abs( 0.0 );\n* // returns 0.0\n*\n* v = abs( -0.0 );\n* // returns 0.0\n*\n* v = abs( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar abs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ 0 ] = x * SCALAR;\n\t\tout[ 1 ] = -52;\n\t\treturn out;\n\t}\n\tout[ 0 ] = x;\n\tout[ 1 ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './normalize.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar EXP_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar MAX_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );\nvar MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );\nvar MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar copysign = require( '@stdlib/math-base-special-copysign' );\nvar normalize = require( '@stdlib/number-float64-base-normalize' );\nvar floatExp = require( '@stdlib/number-float64-base-exponent' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\texp === 0 ||\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( FRAC, frac );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords( WORDS, frac );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* var normalize = require( '@stdlib/number-float64-base-normalize' );\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var normalize = require( '@stdlib/number-float64-base-normalize' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar normalize = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-exponent\n*\n* @example\n* var exponent = require( '@stdlib/number-float64-base-exponent' );\n*\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* exp = exponent( -3.14 );\n* // returns 1\n*\n* exp = exponent( 0.0 );\n* // returns -1023\n*\n* exp = exponent( NaN );\n* // returns 1024\n*/\n\n// MODULES //\n\nvar exponent = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multiply a double-precision floating-point number by an integer power of two.\n*\n* @module @stdlib/math-base-special-ldexp\n*\n* @example\n* var ldexp = require( '@stdlib/math-base-special-ldexp' );\n*\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ldexp = require( '@stdlib/math-base-special-ldexp' );\nvar polyvalP = require( './polyval_p.js' );\n\n\n// MAIN //\n\n/**\n* Computes \\\\(e^{r} 2^k\\\\) where \\\\(r = \\mathrm{hi} - \\mathrm{lo}\\\\) and \\\\(|r| \\leq \\ln(2)/2\\\\).\n*\n* @private\n* @param {number} hi - upper bound\n* @param {number} lo - lower bound\n* @param {integer} k - power of 2\n* @returns {number} function value\n*/\nfunction expmulti( hi, lo, k ) {\n\tvar r;\n\tvar t;\n\tvar c;\n\tvar y;\n\n\tr = hi - lo;\n\tt = r * r;\n\tc = r - ( t*polyvalP( t ) );\n\ty = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);\n\n\treturn ldexp( y, k );\n}\n\n\n// EXPORTS //\n\nmodule.exports = expmulti;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar trunc = require( '@stdlib/math-base-special-trunc' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar expmulti = require( './expmulti.js' );\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01;\nvar LN2_LO = 1.90821492927058770002e-10;\nvar LOG2_E = 1.44269504088896338700e+00;\nvar OVERFLOW = 7.09782712893383973096e+02;\nvar UNDERFLOW = -7.45133219101941108420e+02;\nvar NEARZERO = 1.0 / (1 << 28); // 2^-28;\nvar NEG_NEARZERO = -NEARZERO;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural exponential function.\n*\n* ## Method\n*\n* 1.  We reduce \\\\( x \\\\) to an \\\\( r \\\\) so that \\\\( |r| \\leq 0.5 \\cdot \\ln(2) \\approx 0.34658 \\\\). Given \\\\( x \\\\), we find an \\\\( r \\\\) and integer \\\\( k \\\\) such that\n*\n*     ```tex\n*     \\begin{align*}\n*     x &= k \\cdot \\ln(2) + r \\\\\n*     |r| &\\leq 0.5 \\cdot \\ln(2)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     \\\\( r \\\\) can be represented as \\\\( r = \\mathrm{hi} - \\mathrm{lo} \\\\) for better accuracy.\n*\n*     <!-- </note> -->\n*\n* 2.  We approximate of \\\\( e^{r} \\\\) by a special rational function on the interval \\\\(\\[0,0.34658]\\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     R\\left(r^2\\right) &= r \\cdot \\frac{ e^{r}+1 }{ e^{r}-1 } \\\\\n*     &= 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.34658]\\\\) to generate a polynomial of degree \\\\(5\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-59}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5\n*     ```\n*\n*     where \\\\( z = r^2 \\\\) and\n*\n*     ```tex\n*     \\left|  2 + P_1 z + \\ldots + P_5 z^5  - R(z) \\right| \\leq 2^{-59}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\( P_1 \\\\) to \\\\( P_5 \\\\) are listed in the source code.\n*\n*     <!-- </note> -->\n*\n*     The computation of \\\\( e^{r} \\\\) thus becomes\n*\n*     ```tex\n*     \\begin{align*}\n*     e^{r} &= 1 + \\frac{2r}{R-r} \\\\\n*           &= 1 + r + \\frac{r \\cdot R_1(r)}{2 - R_1(r)}\\ \\text{for better accuracy}\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     R_1(r) = r - P_1\\ r^2 + P_2\\ r^4 + \\ldots + P_5\\ r^{10}\n*     ```\n*\n* 3.  We scale back to obtain \\\\( e^{x} \\\\). From step 1, we have\n*\n*     ```tex\n*     e^{x} = 2^k e^{r}\n*     ```\n*\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* e^\\infty &= \\infty \\\\\n* e^{-\\infty} &= 0 \\\\\n* e^{\\mathrm{NaN}} &= \\mathrm{NaN} \\\\\n* e^0 &= 1\\ \\mathrm{is\\ exact\\ for\\ finite\\ argument\\ only}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   For an IEEE double,\n*\n*     -   if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) overflows\n*     -   if \\\\(x < -7.45133219101941108420\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) underflows\n*\n* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp( 4.0 );\n* // returns ~54.5982\n*\n* @example\n* var v = exp( -9.0 );\n* // returns ~1.234e-4\n*\n* @example\n* var v = exp( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp( NaN );\n* // returns NaN\n*/\nfunction exp( x ) {\n\tvar hi;\n\tvar lo;\n\tvar k;\n\n\tif ( isnan( x ) || x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > OVERFLOW ) {\n\t\treturn PINF;\n\t}\n\tif ( x < UNDERFLOW ) {\n\t\treturn 0.0;\n\t}\n\tif (\n\t\tx > NEG_NEARZERO &&\n\t\tx < NEARZERO\n\t) {\n\t\treturn 1.0 + x;\n\t}\n\t// Reduce and compute `r = hi - lo` for extra precision.\n\tif ( x < 0.0 ) {\n\t\tk = trunc( (LOG2_E*x) - 0.5 );\n\t} else {\n\t\tk = trunc( (LOG2_E*x) + 0.5 );\n\t}\n\thi = x - (k*LN2_HI);\n\tlo = k * LN2_LO;\n\n\treturn expmulti( hi, lo, k );\n}\n\n\n// EXPORTS //\n\nmodule.exports = exp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar exp = require( '@stdlib/math-base-special-exp' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a geometric mean.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrgmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator();\n* // returns ~3.16\n*/\nfunction incrgmean() {\n\tvar sum;\n\tvar N;\n\tvar v;\n\n\tsum = 0.0;\n\tN = 0;\n\tv = 1;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated geometric mean. If not provided a value, the accumulator function returns the current geometric mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} geometric mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn v;\n\t\t}\n\t\tN += 1;\n\t\tsum += ln( x );\n\t\tv = exp( sum/N );\n\t\treturn v;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrgmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrgmean = require( '@stdlib/stats-incr-gmean' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercugmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercugmean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrgmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercugmean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercugmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a geometric mean incrementally.\n*\n* @module @stdlib/stats-incr-gmean\n*\n* @example\n* var incrgmean = require( '@stdlib/stats-incr-gmean' );\n*\n* var accumulator = incrgmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator();\n* // returns ~3.16\n*/\n\n// MODULES //\n\nvar incrgmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrgmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative geometric mean.\n*\n* @module @stdlib/stats-iter-cugmean\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercugmean = require( '@stdlib/stats-iter-cugmean' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercugmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean.\n*\n* ## Method\n*\n* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu_n &= \\frac{1}{n} \\sum_{i=0}^{n-1} x_i \\\\\n*           &= \\frac{1}{n} \\biggl(x_{n-1} + \\sum_{i=0}^{n-2} x_i \\biggr) \\\\\n*           &= \\frac{1}{n} (x_{n-1} + (n-1)\\mu_{n-1}) \\\\\n*           &= \\mu_{n-1} + \\frac{1}{n} (x_{n-1} - \\mu_{n-1})\n*     \\end{align*}\n*     ```\n*\n* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator();\n* // returns -1.5\n*/\nfunction incrmean() {\n\tvar mu;\n\tvar N;\n\n\tmu = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\tN += 1;\n\t\tmu += (x-mu) / N;\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( '@stdlib/stats-incr-mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a harmonic mean.\n*\n* ## Method\n*\n* -   The harmonic mean of positive real numbers \\\\(x_0, x_1, \\ldots, x_{n-1}\\\\) is defined as\n*\n*     ```tex\n*     \\begin{align*}\n*     H &= \\frac{n}{\\frac{1}{x_0} + \\frac{1}{x_1} + \\cdots + \\frac{1}{x_{n-1}}} \\\\\n*       &= \\frac{n}{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}\n*     \\end{align*}\n*     ```\n*\n*     which may be expressed\n*\n*     ```tex\n*     H = \\biggl( \\frac{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}{n} \\biggr)^{-1}\n*     ```\n*\n* -   Accordingly, to compute the harmonic mean incrementally, we can simply compute the arithmetic mean of reciprocal values and then compute the reciprocal of the result.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrhmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator();\n* // returns ~2.86\n*/\nfunction incrhmean() {\n\tvar mean = incrmean();\n\tvar v;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated harmonic mean. If not provided a value, the accumulator function returns the current harmonic mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} harmonic mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( v === void 0 ) ? null : v;\n\t\t}\n\t\tv = 1.0 / mean( 1.0/x );\n\t\treturn v;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean incrementally.\n*\n* @module @stdlib/stats-incr-mean\n*\n* @example\n* var incrmean = require( '@stdlib/stats-incr-mean' );\n*\n* var accumulator = incrmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator();\n* // returns -1.5\n*/\n\n// MODULES //\n\nvar incrmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrhmean = require( '@stdlib/stats-incr-hmean' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuhmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuhmean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrhmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuhmean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercuhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a harmonic mean incrementally.\n*\n* @module @stdlib/stats-incr-hmean\n*\n* @example\n* var incrhmean = require( '@stdlib/stats-incr-hmean' );\n*\n* var accumulator = incrhmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator();\n* // returns ~2.86\n*/\n\n// MODULES //\n\nvar incrhmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative harmonic mean.\n*\n* @module @stdlib/stats-iter-cuhmean\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercuhmean = require( '@stdlib/stats-iter-cuhmean' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuhmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is positive zero.\n*\n* @module @stdlib/math-base-assert-is-positive-zero\n*\n* @example\n* var isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n*\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* bool = isPositiveZero( -0.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isPositiveZero = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a maximum value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmax();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 3.14\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\nfunction incrmax() {\n\tvar max;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum value. If not provided a value, the accumulator function returns the current max.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} max value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( max === void 0 ) ? null : max;\n\t\t}\n\t\tif (\n\t\t\tmax === void 0 ||\n\t\t\tx > max ||\n\t\t\tisnan( x ) ||\n\t\t\t( x === max && isPositiveZero( x ) )\n\t\t) {\n\t\t\tmax = x;\n\t\t}\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmax = require( '@stdlib/stats-incr-max' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative maximum value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumax( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumax( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmax();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumax( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a maximum value incrementally.\n*\n* @module @stdlib/stats-incr-max\n*\n* @example\n* var incrmax = require( '@stdlib/stats-incr-max' );\n*\n* var accumulator = incrmax();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 3.14\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\n\n// MODULES //\n\nvar incrmax = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative maximum value.\n*\n* @module @stdlib/stats-iter-cumax\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercumax = require( '@stdlib/stats-iter-cumax' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumax( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar incrmax = require( '@stdlib/stats-incr-max' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a maximum absolute value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmaxabs();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 5.0\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\nfunction incrmaxabs() {\n\tvar max = incrmax();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} maximum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn max();\n\t\t}\n\t\treturn max( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmaxabs = require( '@stdlib/stats-incr-maxabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative maximum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumaxabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumaxabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmaxabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumaxabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a maximum absolute value incrementally.\n*\n* @module @stdlib/stats-incr-maxabs\n*\n* @example\n* var incrmaxabs = require( '@stdlib/stats-incr-maxabs' );\n*\n* var accumulator = incrmaxabs();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 5.0\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\n\n// MODULES //\n\nvar incrmaxabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative maximum absolute value.\n*\n* @module @stdlib/stats-iter-cumaxabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercumaxabs = require( '@stdlib/stats-iter-cumaxabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumaxabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmean = require( '@stdlib/stats-incr-mean' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative arithmetic mean.\n*\n* @module @stdlib/stats-iter-cumean\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercumean = require( '@stdlib/stats-iter-cumean' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar incrmean = require( '@stdlib/stats-incr-mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean of absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanabs();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator();\n* // returns 3.5\n*/\nfunction incrmeanabs() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmeanabs = require( '@stdlib/stats-incr-meanabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumeanabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmeanabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumeanabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean of absolute values incrementally.\n*\n* @module @stdlib/stats-incr-meanabs\n*\n* @example\n* var incrmeanabs = require( '@stdlib/stats-incr-meanabs' );\n*\n* var accumulator = incrmeanabs();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator();\n* // returns 3.5\n*/\n\n// MODULES //\n\nvar incrmeanabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative arithmetic mean of absolute values.\n*\n* @module @stdlib/stats-iter-cumeanabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercumeanabs = require( '@stdlib/stats-iter-cumeanabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( '@stdlib/stats-incr-mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanabs2();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator();\n* // returns 14.5\n*/\nfunction incrmeanabs2() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmeanabs2 = require( '@stdlib/stats-incr-meanabs2' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumeanabs2( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmeanabs2();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumeanabs2( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean of squared absolute values incrementally.\n*\n* @module @stdlib/stats-incr-meanabs2\n*\n* @example\n* var incrmeanabs2 = require( '@stdlib/stats-incr-meanabs2' );\n*\n* var accumulator = incrmeanabs2();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator();\n* // returns 14.5\n*/\n\n// MODULES //\n\nvar incrmeanabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative arithmetic mean of squared absolute values.\n*\n* @module @stdlib/stats-iter-cumeanabs2\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercumeanabs2 = require( '@stdlib/stats-iter-cumeanabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a mid-range.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmidrange();\n*\n* var midrange = accumulator();\n* // returns null\n*\n* midrange = accumulator( 3.14 );\n* // returns 3.14\n*\n* midrange = accumulator( -5.0 );\n* // returns ~-0.93\n*\n* midrange = accumulator( 10.1 );\n* // returns 2.55\n*\n* midrange = accumulator();\n* // returns 2.55\n*/\nfunction incrmidrange() {\n\tvar max = NINF;\n\tvar min = PINF;\n\tvar sum;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {number} mid-range\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( sum === void 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sum / 2.0;\n\t\t}\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\tsum = max + min;\n\t\treturn sum / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmidrange = require( '@stdlib/stats-incr-midrange' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative mid-range.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumidrange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumidrange( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmidrange();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumidrange( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a mid-range incrementally.\n*\n* @module @stdlib/stats-incr-midrange\n*\n* @example\n* var incrmidrange = require( '@stdlib/stats-incr-midrange' );\n*\n* var accumulator = incrmidrange();\n*\n* var midrange = accumulator();\n* // returns null\n*\n* midrange = accumulator( 3.14 );\n* // returns 3.14\n*\n* midrange = accumulator( -5.0 );\n* // returns ~-0.93\n*\n* midrange = accumulator( 10.1 );\n* // returns 2.55\n*\n* midrange = accumulator();\n* // returns 2.55\n*/\n\n// MODULES //\n\nvar incrmidrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative mid-range.\n*\n* @module @stdlib/stats-iter-cumidrange\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercumidrange = require( '@stdlib/stats-iter-cumidrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumidrange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is negative zero.\n*\n* @module @stdlib/math-base-assert-is-negative-zero\n*\n* @example\n* var isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\n*\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* bool = isNegativeZero( 0.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isNegativeZero = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a minimum value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmin();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns -5.0\n*\n* min = accumulator( 10.1 );\n* // returns -5.0\n*\n* min = accumulator();\n* // returns -5.0\n*/\nfunction incrmin() {\n\tvar min;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum value. If not provided a value, the accumulator function returns the current min.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} min value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( min === void 0 ) ? null : min;\n\t\t}\n\t\tif (\n\t\t\tmin === void 0 ||\n\t\t\tx < min ||\n\t\t\tisnan( x ) ||\n\t\t\t( x === min && isNegativeZero( x ) )\n\t\t) {\n\t\t\tmin = x;\n\t\t}\n\t\treturn min;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmin = require( '@stdlib/stats-incr-min' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative minimum value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumin( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumin( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmin();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumin( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a minimum value incrementally.\n*\n* @module @stdlib/stats-incr-min\n*\n* @example\n* var incrmin = require( '@stdlib/stats-incr-min' );\n*\n* var accumulator = incrmin();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns -5.0\n*\n* min = accumulator( 10.1 );\n* // returns -5.0\n*\n* min = accumulator();\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar incrmin = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative minimum value.\n*\n* @module @stdlib/stats-iter-cumin\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercumin = require( '@stdlib/stats-iter-cumin' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumin( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar incrmin = require( '@stdlib/stats-incr-min' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a minimum absolute value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminabs();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns 3.14\n*\n* min = accumulator( 10.1 );\n* // returns 3.14\n*\n* min = accumulator();\n* // returns 3.14\n*/\nfunction incrminabs() {\n\tvar min = incrmin();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} minimum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn min();\n\t\t}\n\t\treturn min( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrminabs = require( '@stdlib/stats-incr-minabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative minimum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuminabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuminabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrminabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuminabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercuminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a minimum absolute value incrementally.\n*\n* @module @stdlib/stats-incr-minabs\n*\n* @example\n* var incrminabs = require( '@stdlib/stats-incr-minabs' );\n*\n* var accumulator = incrminabs();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns 3.14\n*\n* min = accumulator( 10.1 );\n* // returns 3.14\n*\n* min = accumulator();\n* // returns 3.14\n*/\n\n// MODULES //\n\nvar incrminabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative minimum absolute value.\n*\n* @module @stdlib/stats-iter-cuminabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercuminabs = require( '@stdlib/stats-iter-cuminabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuminabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar normalize = require( '@stdlib/number-float64-base-normalize' );\nvar floatExp = require( '@stdlib/number-float64-base-exponent' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Exponent equal to 1022 (BIAS-1): 0 01111111110 00000000000000000000 => 1071644672\nvar SET_EXP_MASK = 0x3fe00000|0; // asm type annotation\n\n// Normalization workspace:\nvar X = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var out = frexp( new Array( 2 ), 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), NaN );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), Infinity );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), -Infinity );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( out, x ) {\n\tvar high;\n\tvar exp;\n\tif (\n\t\tx === 0.0 || // handles -0\n\t\tisnan( x ) ||\n\t\tisInfinite( x )\n\t) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\t// If `x` is subnormal, normalize it...\n\tnormalize( X, x );\n\n\t// Extract the exponent from `x` and add the normalization exponent:\n\texp = floatExp( X[0] ) + X[ 1 ] + 1;\n\n\t// Break `x` into two unsigned 32-bit integers (higher and lower order words):\n\ttoWords( WORDS, X[ 0 ] );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits within the higher order word to BIAS-1 (1023-1=1022):\n\thigh |= SET_EXP_MASK;\n\n\t// Create a new floating-point number:\n\tx = fromWords( high, WORDS[ 1 ] );\n\n\tout[ 0 ] = x;\n\tout[ 1 ] = exp;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './frexp.js' );\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 2 );\n*\n* var y = frexp( out, 4.0 );\n* // returns <Float64Array>[ 0.5, 3 ]\n*\n* var bool = ( y === out );\n* // returns true\n*\n* @example\n* var out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @module @stdlib/math-base-special-frexp\n*\n* @example\n* var frexp = require( '@stdlib/math-base-special-frexp' );\n*\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var frexp = require( '@stdlib/math-base-special-frexp' );\n*\n* var out = new Float64Array( 2 );\n*\n* var y = frexp( out, 4.0 );\n* // returns <Float64Array>[ 0.5, 3 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar frexp = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar frexp = require( '@stdlib/math-base-special-frexp' );\nvar ldexp = require( '@stdlib/math-base-special-ldexp' );\n\n\n// VARIABLES //\n\n// `frexp` workspace:\nvar PARTS = [ 0.0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a product.\n*\n* ## Method\n*\n* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.\n*\n* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).\n*\n*\n* ## References\n*\n* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrprod();\n*\n* var prod = accumulator();\n* // returns null\n*\n* prod = accumulator( 2.0 );\n* // returns 2.0\n*\n* prod = accumulator( -5.0 );\n* // returns -10.0\n*\n* prod = accumulator();\n* // returns -10.0\n*/\nfunction incrprod() {\n\tvar frac;\n\tvar prod;\n\tvar exp;\n\n\t// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):\n\tfrac = 0.5;\n\texp = 1.0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated product. If not provided a value, the accumulator function returns the current product.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} product or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( prod === void 0 ) ? null : prod;\n\t\t}\n\t\t// Split the incoming value into a normalized fraction and exponent:\n\t\tfrexp( PARTS, x );\n\n\t\t// Update the accumulated fraction:\n\t\tfrac *= PARTS[ 0 ];\n\n\t\t// Update the accumulated exponent:\n\t\texp += PARTS[ 1 ];\n\n\t\t// Ensure fraction remains normalized to avoid overflow/underflow...\n\t\tif ( frac > -0.5 && frac < 0.5 ) {\n\t\t\tfrexp( PARTS, frac );\n\t\t\tfrac = PARTS[ 0 ];\n\t\t\texp += PARTS[ 1 ];\n\t\t}\n\t\tprod = ldexp( frac, exp );\n\t\treturn prod;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a product incrementally.\n*\n* @module @stdlib/stats-incr-prod\n*\n* @example\n* var incrprod = require( '@stdlib/stats-incr-prod' );\n*\n* var accumulator = incrprod();\n*\n* var prod = accumulator();\n* // returns null\n*\n* prod = accumulator( 2.0 );\n* // returns 2.0\n*\n* prod = accumulator( -5.0 );\n* // returns -10.0\n*\n* prod = accumulator();\n* // returns -10.0\n*/\n\n// MODULES //\n\nvar incrprod = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrprod = require( '@stdlib/stats-incr-prod' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative product.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuprod( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuprod( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrprod();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuprod( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercuprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative product.\n*\n* @module @stdlib/stats-iter-cuprod\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercuprod = require( '@stdlib/stats-iter-cuprod' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuprod( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a range.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrrange();\n*\n* var range = accumulator();\n* // returns null\n*\n* range = accumulator( 3.14 );\n* // returns 0.0\n*\n* range = accumulator( -5.0 );\n* // returns 8.14\n*\n* range = accumulator( 10.1 );\n* // returns 15.1\n*\n* range = accumulator();\n* // returns 15.1\n*/\nfunction incrrange() {\n\tvar range;\n\tvar max = NINF;\n\tvar min = PINF;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( range === void 0 ) ? null : range;\n\t\t}\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\trange = max - min;\n\t\treturn range;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a range incrementally.\n*\n* @module @stdlib/stats-incr-range\n*\n* @example\n* var incrrange = require( '@stdlib/stats-incr-range' );\n*\n* var accumulator = incrrange();\n*\n* var range = accumulator();\n* // returns null\n*\n* range = accumulator( 3.14 );\n* // returns 0.0\n*\n* range = accumulator( -5.0 );\n* // returns 8.14\n*\n* range = accumulator( 10.1 );\n* // returns 15.1\n*\n* range = accumulator();\n* // returns 15.1\n*/\n\n// MODULES //\n\nvar incrrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrrange = require( '@stdlib/stats-incr-range' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative range.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercurange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercurange( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrrange();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercurange( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercurange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative range.\n*\n* @module @stdlib/stats-iter-curange\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercurange = require( '@stdlib/stats-iter-curange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercurange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum.\n*\n* ## Method\n*\n* -   This implementation uses a second-order \"iterative Kahan–Babuška algorithm\", as proposed by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsum();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator();\n* // returns -3.0\n*/\nfunction incrsum() {\n\tvar sum;\n\tvar ccs;\n\tvar FLG;\n\tvar cs;\n\tvar cc;\n\tvar t;\n\tvar c;\n\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum+cs+ccs : null;\n\t\t}\n\t\tFLG = true;\n\t\tt = sum + x;\n\t\tif ( abs( sum ) >= abs( x ) ) {\n\t\t\tc = (sum-t) + x;\n\t\t} else {\n\t\t\tc = (x-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\treturn sum + cs + ccs;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum incrementally.\n*\n* @module @stdlib/stats-incr-sum\n*\n* @example\n* var incrsum = require( '@stdlib/stats-incr-sum' );\n*\n* var accumulator = incrsum();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator();\n* // returns -3.0\n*/\n\n// MODULES //\n\nvar incrsum = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrsum = require( '@stdlib/stats-incr-sum' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusum( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusum( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrsum();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusum( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative sum.\n*\n* @module @stdlib/stats-iter-cusum\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercusum = require( '@stdlib/stats-iter-cusum' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusum( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\nfunction incrsumabs() {\n\tvar sum = 0.0;\n\tvar FLG;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum : null;\n\t\t}\n\t\tFLG = true;\n\t\tsum += abs( x );\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of absolute values incrementally.\n*\n* @module @stdlib/stats-incr-sumabs\n*\n* @example\n* var incrsumabs = require( '@stdlib/stats-incr-sumabs' );\n*\n* var accumulator = incrsumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\n\n// MODULES //\n\nvar incrsumabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrsumabs = require( '@stdlib/stats-incr-sumabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusumabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrsumabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusumabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercusumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative sum of absolute values.\n*\n* @module @stdlib/stats-iter-cusumabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercusumabs = require( '@stdlib/stats-iter-cusumabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\nfunction incrsumabs2() {\n\tvar sum = 0.0;\n\tvar FLG;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum : null;\n\t\t}\n\t\tFLG = true;\n\t\tsum += x * x;\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of squared absolute values incrementally.\n*\n* @module @stdlib/stats-incr-sumabs2\n*\n* @example\n* var incrsumabs2 = require( '@stdlib/stats-incr-sumabs2' );\n*\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\n\n// MODULES //\n\nvar incrsumabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrsumabs2 = require( '@stdlib/stats-incr-sumabs2' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusumabs2( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrsumabs2();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusumabs2( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercusumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative sum of squared absolute values.\n*\n* @module @stdlib/stats-iter-cusumabs2\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itercusumabs2 = require( '@stdlib/stats-iter-cusumabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrmax = require( '@stdlib/stats-incr-max' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} maximum value\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermax( rand );\n* // returns <number>\n*/\nfunction itermax( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmax();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of all iterated values.\n*\n* @module @stdlib/stats-iter-max\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermax = require( '@stdlib/stats-iter-max' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermax( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrmaxabs = require( '@stdlib/stats-incr-maxabs' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} maximum absolute value\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermaxabs( rand );\n* // returns <number>\n*/\nfunction itermaxabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmaxabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum absolute value of all iterated values.\n*\n* @module @stdlib/stats-iter-maxabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermaxabs = require( '@stdlib/stats-iter-maxabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermaxabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrmean = require( '@stdlib/stats-incr-mean' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermean( rand );\n* // returns <number>\n*/\nfunction itermean( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmean();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean over all iterated values.\n*\n* @module @stdlib/stats-iter-mean\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermean = require( '@stdlib/stats-iter-mean' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermean( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrmeanabs = require( '@stdlib/stats-incr-meanabs' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean of absolute values\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs( rand );\n* // returns <number>\n*/\nfunction itermeanabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmeanabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of absolute values for all iterated values.\n*\n* @module @stdlib/stats-iter-meanabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermeanabs = require( '@stdlib/stats-iter-meanabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrmeanabs2 = require( '@stdlib/stats-incr-meanabs2' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of squared absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean of squared absolute values\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs2( rand );\n* // returns <number>\n*/\nfunction itermeanabs2( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmeanabs2();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of squared absolute values for all iterated values.\n*\n* @module @stdlib/stats-iter-meanabs2\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermeanabs2 = require( '@stdlib/stats-iter-meanabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs2( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrmidrange = require( '@stdlib/stats-incr-midrange' );\n\n\n// MAIN //\n\n/**\n* Computes the mid-range of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} mid-range\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = itermidrange( rand );\n* // returns <number>\n*/\nfunction itermidrange( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmidrange();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mid-range of all iterated values.\n*\n* @module @stdlib/stats-iter-midrange\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermidrange = require( '@stdlib/stats-iter-midrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = itermidrange( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrmin = require( '@stdlib/stats-incr-min' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} minimum value\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermin( rand );\n* // returns <number>\n*/\nfunction itermin( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmin();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of all iterated values.\n*\n* @module @stdlib/stats-iter-min\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermin = require( '@stdlib/stats-iter-min' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermin( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrminabs = require( '@stdlib/stats-incr-minabs' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} minimum absolute value\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = iterminabs( rand );\n* // returns <number>\n*/\nfunction iterminabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrminabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum absolute value of all iterated values.\n*\n* @module @stdlib/stats-iter-minabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var iterminabs = require( '@stdlib/stats-iter-minabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = iterminabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toString = require( './tostring.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Number = require( '@stdlib/number-ctor' );\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nmodule.exports = toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasToStringTag = require( '@stdlib/assert-has-tostringtag-support' );\nvar nativeClass = require( '@stdlib/utils-native-class' );\nvar Number = require( '@stdlib/number-ctor' );\nvar test = require( './try2serialize.js' );\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* var isNumber = require( '@stdlib/assert-is-number' );\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* var isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* var isNumber = require( '@stdlib/assert-is-number' ).isObject;\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isNumber = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( isNumber, 'isPrimitive', isPrimitive );\nsetReadOnly( isNumber, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar isInt = require( '@stdlib/math-base-assert-is-integer' );\n\n\n// MAIN //\n\n/**\n* Tests if a number primitive is an integer value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a number primitive is an integer value\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tvalue < PINF &&\n\t\tvalue > NINF &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isInt = require( './integer.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having an integer value\n*\n* @example\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isObject;\nvar isInt = require( './integer.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having an integer value\n*\n* @example\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is an integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an integer\n*\n* @example\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isInteger( null );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an integer.\n*\n* @module @stdlib/assert-is-integer\n*\n* @example\n* var isInteger = require( '@stdlib/assert-is-integer' );\n*\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isInteger( -3.14 );\n* // returns false\n*\n* bool = isInteger( null );\n* // returns false\n*\n* @example\n* // Use interface to check for integer primitives...\n* var isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\n*\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* // Use interface to check for integer objects...\n* var isInteger = require( '@stdlib/assert-is-integer' ).isObject;\n*\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isInteger = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( isInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isInteger, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert-is-integer' ).isObject;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a positive integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a positive integer\n*\n* @example\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( null );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a positive integer.\n*\n* @module @stdlib/assert-is-positive-integer\n*\n* @example\n* var isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\n*\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* bool = isPositiveInteger( null );\n* // returns false\n*\n* @example\n* var isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* var isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isObject;\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isPositiveInteger = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( isPositiveInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isPositiveInteger, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmax( W ) {\n\tvar buf;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum. If not provided a value, the accumulator function returns the current maximum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx > max ||\n\t\t\t\t( x === max && isPositiveZero( x ) )\n\t\t\t) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or greater than current maximum value...\n\t\telse if ( isnan( x ) || x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: outgoing value is the current maximum and the new value is less than the maximum, and, thus, we need to find a new maximum among the current values...\n\t\telse if ( ( buf[ i ] === max && x < max ) || isnan( buf[ i ] ) ) {\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current maximum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === max && x === max && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\tmax = x;\n\t\t\t} else if ( isPositiveZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\tmax = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both negative zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the maximum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmmax = require( '@stdlib/stats-incr-mmax' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving maximum value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmax( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmax( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmax( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmax( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving maximum incrementally.\n*\n* @module @stdlib/stats-incr-mmax\n*\n* @example\n* var incrmmax = require( '@stdlib/stats-incr-mmax' );\n*\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar incrmmax = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving maximum value.\n*\n* @module @stdlib/stats-iter-mmax\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermmax = require( '@stdlib/stats-iter-mmax' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmax( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar incrmmax = require( '@stdlib/stats-incr-mmax' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum absolute value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmaxabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 5.0\n*\n* m = accumulator( 3.0 );\n* // returns 5.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmaxabs( W ) {\n\tvar max;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmax = incrmmax( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn max();\n\t\t}\n\t\treturn max( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmmaxabs = require( '@stdlib/stats-incr-mmaxabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving maximum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmaxabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmaxabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmaxabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmaxabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving maximum absolute value incrementally.\n*\n* @module @stdlib/stats-incr-mmaxabs\n*\n* @example\n* var incrmmaxabs = require( '@stdlib/stats-incr-mmaxabs' );\n*\n* var accumulator = incrmmaxabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 5.0\n*\n* m = accumulator( 3.0 );\n* // returns 5.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar incrmmaxabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving maximum absolute value.\n*\n* @module @stdlib/stats-iter-mmaxabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermmaxabs = require( '@stdlib/stats-iter-mmaxabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmaxabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmean( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator( 3.0 );\n* // returns 0.0\n*\n* mu = accumulator( 5.0 );\n* // returns 1.0\n*\n* mu = accumulator();\n* // returns 1.0\n*/\nfunction incrmmean( W ) {\n\tvar delta;\n\tvar buf;\n\tvar mu;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmu = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding mean is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the sample mean...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tbreak; // mean is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current mean nor the incoming value are NaN, so we need to update the sample mean...\n\t\telse if ( isnan( mu ) === false ) {\n\t\t\tdelta = x - buf[ i ];\n\t\t\tmu += delta / W;\n\t\t}\n\t\t// Case: the current mean is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmmean = require( '@stdlib/stats-incr-mmean' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmean( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmean( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmean( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmean( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean incrementally.\n*\n* @module @stdlib/stats-incr-mmean\n*\n* @example\n* var incrmmean = require( '@stdlib/stats-incr-mmean' );\n*\n* var accumulator = incrmmean( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator( 3.0 );\n* // returns 0.0\n*\n* mu = accumulator( 5.0 );\n* // returns 1.0\n*\n* mu = accumulator();\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar incrmmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving arithmetic mean.\n*\n* @module @stdlib/stats-iter-mmean\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermmean = require( '@stdlib/stats-iter-mmean' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmean( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar incrmmean = require( '@stdlib/stats-incr-mmean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean of absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanabs( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator( 3.0 );\n* // returns ~3.33\n*\n* mu = accumulator( 5.0 );\n* // returns ~4.33\n*\n* mu = accumulator();\n* // returns ~4.33\n*/\nfunction incrmmeanabs( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmmeanabs = require( '@stdlib/stats-incr-mmeanabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmeanabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmeanabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmeanabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean of absolute values incrementally.\n*\n* @module @stdlib/stats-incr-mmeanabs\n*\n* @example\n* var incrmmeanabs = require( '@stdlib/stats-incr-mmeanabs' );\n*\n* var accumulator = incrmmeanabs( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator( 3.0 );\n* // returns ~3.33\n*\n* mu = accumulator( 5.0 );\n* // returns ~4.33\n*\n* mu = accumulator();\n* // returns ~4.33\n*/\n\n// MODULES //\n\nvar incrmmeanabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving arithmetic mean of absolute values.\n*\n* @module @stdlib/stats-iter-mmeanabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermmeanabs = require( '@stdlib/stats-iter-mmeanabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar incrmmean = require( '@stdlib/stats-incr-mmean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean of squared absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanabs2( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator( 3.0 );\n* // returns ~12.67\n*\n* m = accumulator( 5.0 );\n* // returns ~19.67\n*\n* m = accumulator();\n* // returns ~19.67\n*/\nfunction incrmmeanabs2( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmmeanabs2 = require( '@stdlib/stats-incr-mmeanabs2' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmeanabs2( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmeanabs2( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmeanabs2( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean of squared absolute values incrementally.\n*\n* @module @stdlib/stats-incr-mmeanabs2\n*\n* @example\n* var incrmmeanabs2 = require( '@stdlib/stats-incr-mmeanabs2' );\n*\n* var accumulator = incrmmeanabs2( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator( 3.0 );\n* // returns ~12.67\n*\n* m = accumulator( 5.0 );\n* // returns ~19.67\n*\n* m = accumulator();\n* // returns ~19.67\n*/\n\n// MODULES //\n\nvar incrmmeanabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving arithmetic mean of squared absolute values.\n*\n* @module @stdlib/stats-iter-mmeanabs2\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermmeanabs2 = require( '@stdlib/stats-iter-mmeanabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mid-range.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmidrange( 3 );\n*\n* var mr = accumulator();\n* // returns null\n*\n* mr = accumulator( 2.0 );\n* // returns 2.0\n*\n* mr = accumulator( -5.0 );\n* // returns -1.5\n*\n* mr = accumulator( 3.0 );\n* // returns -1.0\n*\n* mr = accumulator( 5.0 );\n* // returns 0.0\n*\n* mr = accumulator();\n* // returns 0.0\n*/\nfunction incrmmidrange( W ) {\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mid-range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ( max+min ) / 2.0;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 0.0; // normalizes +-0\n\t\t}\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\treturn ( max+min ) / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmmidrange = require( '@stdlib/stats-incr-mmidrange' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving mid-range.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmidrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmidrange( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmidrange( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmidrange( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mid-range incrementally.\n*\n* @module @stdlib/stats-incr-mmidrange\n*\n* @example\n* var incrmmidrange = require( '@stdlib/stats-incr-mmidrange' );\n*\n* var accumulator = incrmmidrange( 3 );\n*\n* var mr = accumulator();\n* // returns null\n*\n* mr = accumulator( 2.0 );\n* // returns 2.0\n*\n* mr = accumulator( -5.0 );\n* // returns -1.5\n*\n* mr = accumulator( 3.0 );\n* // returns -1.0\n*\n* mr = accumulator( 5.0 );\n* // returns 0.0\n*\n* mr = accumulator();\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar incrmmidrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving mid-range.\n*\n* @module @stdlib/stats-iter-mmidrange\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermmidrange = require( '@stdlib/stats-iter-mmidrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmidrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving minimum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmin( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns -5.0\n*\n* m = accumulator( 3.0 );\n* // returns -5.0\n*\n* m = accumulator( 5.0 );\n* // returns -5.0\n*\n* m = accumulator();\n* // returns -5.0\n*/\nfunction incrmmin( W ) {\n\tvar buf;\n\tvar min;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum. If not provided a value, the accumulator function returns the current minimum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} minimum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn min;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx < min ||\n\t\t\t\t( x === min && isNegativeZero( x ) )\n\t\t\t) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or less than current minimum value...\n\t\telse if ( isnan( x ) || x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: outgoing value is the current minimum and the new value is greater than the minimum, and, thus, we need to find a new minimum among the current values...\n\t\telse if ( ( buf[ i ] === min && x > min ) || isnan( buf[ i ] ) ) {\n\t\t\tmin = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === min && x === min && x === 0.0 ) {\n\t\t\tif ( isNegativeZero( x ) ) {\n\t\t\t\tmin = x;\n\t\t\t} else if ( isNegativeZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...\n\t\t\t\tmin = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isNegativeZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmin = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both positive zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the minimum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn min;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmmin = require( '@stdlib/stats-incr-mmin' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving minimum value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmin( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmin( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmin( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmin( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving minimum incrementally.\n*\n* @module @stdlib/stats-incr-mmin\n*\n* @example\n* var incrmmin = require( '@stdlib/stats-incr-mmin' );\n*\n* var accumulator = incrmmin( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns -5.0\n*\n* m = accumulator( 3.0 );\n* // returns -5.0\n*\n* m = accumulator( 5.0 );\n* // returns -5.0\n*\n* m = accumulator();\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar incrmmin = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving minimum value.\n*\n* @module @stdlib/stats-iter-mmin\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermmin = require( '@stdlib/stats-iter-mmin' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmin( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar incrmmin = require( '@stdlib/stats-incr-mmin' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving minimum absolute value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmminabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 2.0\n*\n* m = accumulator( 5.0 );\n* // returns 3.0\n*\n* m = accumulator();\n* // returns 3.0\n*/\nfunction incrmminabs( W ) {\n\tvar min;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmin = incrmmin( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} minimum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn min();\n\t\t}\n\t\treturn min( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmminabs = require( '@stdlib/stats-incr-mminabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving minimum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermminabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermminabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmminabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermminabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving minimum absolute value incrementally.\n*\n* @module @stdlib/stats-incr-mminabs\n*\n* @example\n* var incrmminabs = require( '@stdlib/stats-incr-mminabs' );\n*\n* var accumulator = incrmminabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 2.0\n*\n* m = accumulator( 5.0 );\n* // returns 2.0\n*\n* m = accumulator();\n* // returns 2.0\n*/\n\n// MODULES //\n\nvar incrmminabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving minimum absolute value.\n*\n* @module @stdlib/stats-iter-mminabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermminabs = require( '@stdlib/stats-iter-mminabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermminabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar frexp = require( '@stdlib/math-base-special-frexp' );\nvar ldexp = require( '@stdlib/math-base-special-ldexp' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// FUNCTIONS //\n\n/**\n* Computes an updated product.\n*\n* @private\n* @param {Array} workspace - workspace array\n* @param {Object} acc - accumulated fractional and exponent parts\n* @param {number} x - multiplicative factor\n* @returns {number} product\n*/\nfunction product( workspace, acc, x ) {\n\t// Split the incoming value into a normalized fraction and exponent:\n\tfrexp( workspace, x );\n\n\t// Update the accumulated fraction:\n\tacc.frac *= workspace[ 0 ];\n\n\t// Update the accumulated exponent:\n\tacc.exp += workspace[ 1 ];\n\n\t// Ensure fraction remains normalized to avoid overflow/underflow...\n\tif ( acc.frac > -0.5 && acc.frac < 0.5 ) {\n\t\tfrexp( workspace, acc.frac );\n\t\tacc.frac = workspace[ 0 ];\n\t\tacc.exp += workspace[ 1 ];\n\t}\n\treturn ldexp( acc.frac, acc.exp );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving product.\n*\n* ## Method\n*\n* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.\n*\n* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).\n*\n*\n* ## References\n*\n* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmprod( 3 );\n*\n* var p = accumulator();\n* // returns null\n*\n* p = accumulator( 2.0 );\n* // returns 2.0\n*\n* p = accumulator( -5.0 );\n* // returns -10.0\n*\n* p = accumulator( 3.0 );\n* // returns -30.0\n*\n* p = accumulator( 5.0 );\n* // returns -75.0\n*\n* p = accumulator();\n* // returns -75.0\n*/\nfunction incrmprod( W ) {\n\tvar parts;\n\tvar prod;\n\tvar buf;\n\tvar acc;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\ti = -1;\n\tN = 0;\n\n\t// Initialize a workspace for `frexp`:\n\tparts = [ 0.0, 0 ];\n\n\t// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):\n\tprod = 1.0;\n\tacc = {};\n\tacc.frac = 0.5;\n\tacc.exp = 1.0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated prodct. If not provided a value, the accumulator function returns the current prodct.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} product or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn prod;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tprod = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tprod = product( parts, acc, x );\n\t\t}\n\t\t// Case: outgoing value is a \"special\" value, and, thus, we need to compute the accumulated value...\n\t\telse if (\n\t\t\tbuf[ i ] === 0.0 ||\n\t\t\tisnan( buf[ i ] ) ||\n\t\t\tisInfinite( buf[ i ] )\n\t\t) {\n\t\t\tN = 1;\n\t\t\tacc.frac = 0.5;\n\t\t\tacc.exp = 1.0;\n\t\t\tproduct( parts, acc, x );\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tprod = NaN;\n\t\t\t\t\t\tbreak; // product is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tprod = product( parts, acc, v );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( prod ) === false ) {\n\t\t\tv = x / buf[ i ];\n\t\t\tprod = product( parts, acc, v );\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\treturn prod;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmprod = require( '@stdlib/stats-incr-mprod' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving product.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermprod( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermprod( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmprod( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermprod( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving product incrementally.\n*\n* @module @stdlib/stats-incr-mprod\n*\n* @example\n* var incrmprod = require( '@stdlib/stats-incr-mprod' );\n*\n* var accumulator = incrmprod( 3 );\n*\n* var p = accumulator();\n* // returns null\n*\n* p = accumulator( 2.0 );\n* // returns 2.0\n*\n* p = accumulator( -5.0 );\n* // returns -10.0\n*\n* p = accumulator( 3.0 );\n* // returns -30.0\n*\n* p = accumulator( 5.0 );\n* // returns -75.0\n*\n* p = accumulator();\n* // returns -75.0\n*/\n\n// MODULES //\n\nvar incrmprod = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving product.\n*\n* @module @stdlib/stats-iter-mprod\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermprod = require( '@stdlib/stats-iter-mprod' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermprod( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving range.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmrange( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0 );\n* // returns 7.0\n*\n* r = accumulator( 3.0 );\n* // returns 8.0\n*\n* r = accumulator( 5.0 );\n* // returns 10.0\n*\n* r = accumulator();\n* // returns 10.0\n*/\nfunction incrmrange( W ) {\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max - min;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 0.0; // normalizes +-0\n\t\t}\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find a new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\treturn max - min;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmrange = require( '@stdlib/stats-incr-mrange' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving range.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermrange( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmrange( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermrange( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving range incrementally.\n*\n* @module @stdlib/stats-incr-mrange\n*\n* @example\n* var incrmrange = require( '@stdlib/stats-incr-mrange' );\n*\n* var accumulator = incrmrange( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0 );\n* // returns 7.0\n*\n* r = accumulator( 3.0 );\n* // returns 8.0\n*\n* r = accumulator( 5.0 );\n* // returns 10.0\n*\n* r = accumulator();\n* // returns 10.0\n*/\n\n// MODULES //\n\nvar incrmrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving range.\n*\n* @module @stdlib/stats-iter-mrange\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermrange = require( '@stdlib/stats-iter-mrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsum( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator( 3.0 );\n* // returns 0.0\n*\n* sum = accumulator( 5.0 );\n* // returns 3.0\n*\n* sum = accumulator();\n* // returns 3.0\n*/\nfunction incrmsum( W ) {\n\tvar buf;\n\tvar sum;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tsum = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tsum = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tsum += x;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated value...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tsum = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tsum = NaN;\n\t\t\t\t\t\tbreak; // sum is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tsum += buf[ k ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( sum ) === false ) {\n\t\t\tsum += x - buf[ i ];\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmsum = require( '@stdlib/stats-incr-msum' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsum( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsum( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmsum( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsum( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sum incrementally.\n*\n* @module @stdlib/stats-incr-msum\n*\n* @example\n* var incrmsum = require( '@stdlib/stats-incr-msum' );\n*\n* var accumulator = incrmsum( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator( 3.0 );\n* // returns 0.0\n*\n* sum = accumulator( 5.0 );\n* // returns 3.0\n*\n* sum = accumulator();\n* // returns 3.0\n*/\n\n// MODULES //\n\nvar incrmsum = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving sum.\n*\n* @module @stdlib/stats-iter-msum\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermsum = require( '@stdlib/stats-iter-msum' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsum( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar incrmsum = require( '@stdlib/stats-incr-msum' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum of absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsumabs( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator( 3.0 );\n* // returns 10.0\n*\n* sum = accumulator( 5.0 );\n* // returns 13.0\n*\n* sum = accumulator();\n* // returns 13.0\n*/\nfunction incrmsumabs( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmsumabs = require( '@stdlib/stats-incr-msumabs' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsumabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmsumabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsumabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sum of absolute values incrementally.\n*\n* @module @stdlib/stats-incr-msumabs\n*\n* @example\n* var incrmsumabs = require( '@stdlib/stats-incr-msumabs' );\n*\n* var accumulator = incrmsumabs( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator( 3.0 );\n* // returns 10.0\n*\n* sum = accumulator( -5.0 );\n* // returns 13.0\n*\n* sum = accumulator();\n* // returns 13.0\n*/\n\n// MODULES //\n\nvar incrmsumabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving sum of absolute values.\n*\n* @module @stdlib/stats-iter-msumabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermsumabs = require( '@stdlib/stats-iter-msumabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar incrmsum = require( '@stdlib/stats-incr-msum' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum of squared absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsumabs2( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator( 3.0 );\n* // returns 38.0\n*\n* sum = accumulator( 5.0 );\n* // returns 59.0\n*\n* sum = accumulator();\n* // returns 59.0\n*/\nfunction incrmsumabs2( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar incrmsumabs2 = require( '@stdlib/stats-incr-msumabs2' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsumabs2( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmsumabs2( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsumabs2( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sum of squared absolute values incrementally.\n*\n* @module @stdlib/stats-incr-msumabs2\n*\n* @example\n* var incrmsumabs2 = require( '@stdlib/stats-incr-msumabs2' );\n*\n* var accumulator = incrmsumabs2( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator( 3.0 );\n* // returns 38.0\n*\n* sum = accumulator( -5.0 );\n* // returns 59.0\n*\n* sum = accumulator();\n* // returns 59.0\n*/\n\n// MODULES //\n\nvar incrmsumabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving sum of squared absolute values.\n*\n* @module @stdlib/stats-iter-msumabs2\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itermsumabs2 = require( '@stdlib/stats-iter-msumabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrprod = require( '@stdlib/stats-incr-prod' );\n\n\n// MAIN //\n\n/**\n* Computes the product of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} product\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var p = iterprod( rand );\n* // returns <number>\n*/\nfunction iterprod( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrprod();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the product of all iterated values.\n*\n* @module @stdlib/stats-iter-prod\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var iterprod = require( '@stdlib/stats-iter-prod' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var p = iterprod( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrrange = require( '@stdlib/stats-incr-range' );\n\n\n// MAIN //\n\n/**\n* Computes the range of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} range\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = iterrange( rand );\n* // returns <number>\n*/\nfunction iterrange( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrrange();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of all iterated values.\n*\n* @module @stdlib/stats-iter-range\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var iterrange = require( '@stdlib/stats-iter-range' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = iterrange( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nmodule.exports = sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a corrected sample standard deviation.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator();\n* // returns ~4.95\n*\n* @example\n* var accumulator = incrstdev( 3.0 );\n*/\nfunction incrstdev( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn sqrt( M2/(N-1) );\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x-mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn sqrt( M2/(N-1) );\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sqrt( M2/N );\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn sqrt( M2/N );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar incrstdev = require( '@stdlib/stats-incr-stdev' );\n\n\n// MAIN //\n\n/**\n* Computes the corrected sample standard deviation over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} corrected sample standard deviation\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = iterstdev( rand );\n* // returns <number>\n*/\nfunction iterstdev( iterator, mean ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tacc = incrstdev( mean );\n\t} else {\n\t\tacc = incrstdev();\n\t}\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a corrected sample standard deviation incrementally.\n*\n* @module @stdlib/stats-incr-stdev\n*\n* @example\n* var incrstdev = require( '@stdlib/stats-incr-stdev' );\n*\n* var accumulator = incrstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator();\n* // returns ~4.95\n*/\n\n// MODULES //\n\nvar incrstdev = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the corrected sample standard deviation over all iterated values.\n*\n* @module @stdlib/stats-iter-stdev\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var iterstdev = require( '@stdlib/stats-iter-stdev' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = iterstdev( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrsum = require( '@stdlib/stats-incr-sum' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersum( rand );\n* // returns <number>\n*/\nfunction itersum( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrsum();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itersum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of all iterated values.\n*\n* @module @stdlib/stats-iter-sum\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itersum = require( '@stdlib/stats-iter-sum' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersum( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrsumabs = require( '@stdlib/stats-incr-sumabs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum of absolute values\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs( rand );\n* // returns <number>\n*/\nfunction itersumabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrsumabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itersumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of absolute values for all iterated values.\n*\n* @module @stdlib/stats-iter-sumabs\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itersumabs = require( '@stdlib/stats-iter-sumabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar incrsumabs2 = require( '@stdlib/stats-incr-sumabs2' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of squared absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum of squared absolute values\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs2( rand );\n* // returns <number>\n*/\nfunction itersumabs2( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrsumabs2();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itersumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of squared absolute values for all iterated values.\n*\n* @module @stdlib/stats-iter-sumabs2\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itersumabs2 = require( '@stdlib/stats-iter-sumabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs2( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an unbiased sample variance.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrvariance();\n*\n* var s2 = accumulator();\n* // returns null\n*\n* s2 = accumulator( 2.0 );\n* // returns 0.0\n*\n* s2 = accumulator( -5.0 );\n* // returns 24.5\n*\n* s2 = accumulator();\n* // returns 24.5\n*\n* @example\n* var accumulator = incrvariance( 3.14 );\n*/\nfunction incrvariance( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn M2 / (N-1);\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn M2 / (N-1);\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn M2 / N;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn M2 / N;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar incrvariance = require( '@stdlib/stats-incr-variance' );\n\n\n// MAIN //\n\n/**\n* Computes the unbiased sample variance over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} unbiased sample variance\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s2 = itervariance( rand );\n* // returns <number>\n*/\nfunction itervariance( iterator, mean ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tacc = incrvariance( mean );\n\t} else {\n\t\tacc = incrvariance();\n\t}\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itervariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an unbiased sample variance incrementally.\n*\n* @module @stdlib/stats-incr-variance\n*\n* @example\n* var incrvariance = require( '@stdlib/stats-incr-variance' );\n*\n* var accumulator = incrvariance();\n*\n* var s2 = accumulator();\n* // returns null\n*\n* s2 = accumulator( 2.0 );\n* // returns 0.0\n*\n* s2 = accumulator( -5.0 );\n* // returns 24.5\n*\n* s2 = accumulator();\n* // returns 24.5\n*/\n\n// MODULES //\n\nvar incrvariance = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the unbiased sample variance over all iterated values.\n*\n* @module @stdlib/stats-iter-variance\n*\n* @example\n* var runif = require( '@stdlib/random-iter-uniform' );\n* var itervariance = require( '@stdlib/stats-iter-variance' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s2 = itervariance( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name itercugmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cugmean}\n*/\nimport itercugmean from '@stdlib/stats-iter-cugmean';\nsetReadOnly( ns, 'itercugmean', itercugmean );\n\n/**\n* @name itercuhmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuhmean}\n*/\nimport itercuhmean from '@stdlib/stats-iter-cuhmean';\nsetReadOnly( ns, 'itercuhmean', itercuhmean );\n\n/**\n* @name itercumax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumax}\n*/\nimport itercumax from '@stdlib/stats-iter-cumax';\nsetReadOnly( ns, 'itercumax', itercumax );\n\n/**\n* @name itercumaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumaxabs}\n*/\nimport itercumaxabs from '@stdlib/stats-iter-cumaxabs';\nsetReadOnly( ns, 'itercumaxabs', itercumaxabs );\n\n/**\n* @name itercumean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumean}\n*/\nimport itercumean from '@stdlib/stats-iter-cumean';\nsetReadOnly( ns, 'itercumean', itercumean );\n\n/**\n* @name itercumeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumeanabs}\n*/\nimport itercumeanabs from '@stdlib/stats-iter-cumeanabs';\nsetReadOnly( ns, 'itercumeanabs', itercumeanabs );\n\n/**\n* @name itercumeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumeanabs2}\n*/\nimport itercumeanabs2 from '@stdlib/stats-iter-cumeanabs2';\nsetReadOnly( ns, 'itercumeanabs2', itercumeanabs2 );\n\n/**\n* @name itercumidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumidrange}\n*/\nimport itercumidrange from '@stdlib/stats-iter-cumidrange';\nsetReadOnly( ns, 'itercumidrange', itercumidrange );\n\n/**\n* @name itercumin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumin}\n*/\nimport itercumin from '@stdlib/stats-iter-cumin';\nsetReadOnly( ns, 'itercumin', itercumin );\n\n/**\n* @name itercuminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuminabs}\n*/\nimport itercuminabs from '@stdlib/stats-iter-cuminabs';\nsetReadOnly( ns, 'itercuminabs', itercuminabs );\n\n/**\n* @name itercuprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuprod}\n*/\nimport itercuprod from '@stdlib/stats-iter-cuprod';\nsetReadOnly( ns, 'itercuprod', itercuprod );\n\n/**\n* @name itercurange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/curange}\n*/\nimport itercurange from '@stdlib/stats-iter-curange';\nsetReadOnly( ns, 'itercurange', itercurange );\n\n/**\n* @name itercusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusum}\n*/\nimport itercusum from '@stdlib/stats-iter-cusum';\nsetReadOnly( ns, 'itercusum', itercusum );\n\n/**\n* @name itercusumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusumabs}\n*/\nimport itercusumabs from '@stdlib/stats-iter-cusumabs';\nsetReadOnly( ns, 'itercusumabs', itercusumabs );\n\n/**\n* @name itercusumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusumabs2}\n*/\nimport itercusumabs2 from '@stdlib/stats-iter-cusumabs2';\nsetReadOnly( ns, 'itercusumabs2', itercusumabs2 );\n\n/**\n* @name itermax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/max}\n*/\nimport itermax from '@stdlib/stats-iter-max';\nsetReadOnly( ns, 'itermax', itermax );\n\n/**\n* @name itermaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/maxabs}\n*/\nimport itermaxabs from '@stdlib/stats-iter-maxabs';\nsetReadOnly( ns, 'itermaxabs', itermaxabs );\n\n/**\n* @name itermean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mean}\n*/\nimport itermean from '@stdlib/stats-iter-mean';\nsetReadOnly( ns, 'itermean', itermean );\n\n/**\n* @name itermeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/meanabs}\n*/\nimport itermeanabs from '@stdlib/stats-iter-meanabs';\nsetReadOnly( ns, 'itermeanabs', itermeanabs );\n\n/**\n* @name itermeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/meanabs2}\n*/\nimport itermeanabs2 from '@stdlib/stats-iter-meanabs2';\nsetReadOnly( ns, 'itermeanabs2', itermeanabs2 );\n\n/**\n* @name itermidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/midrange}\n*/\nimport itermidrange from '@stdlib/stats-iter-midrange';\nsetReadOnly( ns, 'itermidrange', itermidrange );\n\n/**\n* @name itermin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/min}\n*/\nimport itermin from '@stdlib/stats-iter-min';\nsetReadOnly( ns, 'itermin', itermin );\n\n/**\n* @name iterminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/minabs}\n*/\nimport iterminabs from '@stdlib/stats-iter-minabs';\nsetReadOnly( ns, 'iterminabs', iterminabs );\n\n/**\n* @name itermmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmax}\n*/\nimport itermmax from '@stdlib/stats-iter-mmax';\nsetReadOnly( ns, 'itermmax', itermmax );\n\n/**\n* @name itermmaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmaxabs}\n*/\nimport itermmaxabs from '@stdlib/stats-iter-mmaxabs';\nsetReadOnly( ns, 'itermmaxabs', itermmaxabs );\n\n/**\n* @name itermmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmean}\n*/\nimport itermmean from '@stdlib/stats-iter-mmean';\nsetReadOnly( ns, 'itermmean', itermmean );\n\n/**\n* @name itermmeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmeanabs}\n*/\nimport itermmeanabs from '@stdlib/stats-iter-mmeanabs';\nsetReadOnly( ns, 'itermmeanabs', itermmeanabs );\n\n/**\n* @name itermmeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmeanabs2}\n*/\nimport itermmeanabs2 from '@stdlib/stats-iter-mmeanabs2';\nsetReadOnly( ns, 'itermmeanabs2', itermmeanabs2 );\n\n/**\n* @name itermmidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmidrange}\n*/\nimport itermmidrange from '@stdlib/stats-iter-mmidrange';\nsetReadOnly( ns, 'itermmidrange', itermmidrange );\n\n/**\n* @name itermmin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmin}\n*/\nimport itermmin from '@stdlib/stats-iter-mmin';\nsetReadOnly( ns, 'itermmin', itermmin );\n\n/**\n* @name itermminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mminabs}\n*/\nimport itermminabs from '@stdlib/stats-iter-mminabs';\nsetReadOnly( ns, 'itermminabs', itermminabs );\n\n/**\n* @name itermprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mprod}\n*/\nimport itermprod from '@stdlib/stats-iter-mprod';\nsetReadOnly( ns, 'itermprod', itermprod );\n\n/**\n* @name itermrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mrange}\n*/\nimport itermrange from '@stdlib/stats-iter-mrange';\nsetReadOnly( ns, 'itermrange', itermrange );\n\n/**\n* @name itermsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msum}\n*/\nimport itermsum from '@stdlib/stats-iter-msum';\nsetReadOnly( ns, 'itermsum', itermsum );\n\n/**\n* @name itermsumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msumabs}\n*/\nimport itermsumabs from '@stdlib/stats-iter-msumabs';\nsetReadOnly( ns, 'itermsumabs', itermsumabs );\n\n/**\n* @name itermsumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msumabs2}\n*/\nimport itermsumabs2 from '@stdlib/stats-iter-msumabs2';\nsetReadOnly( ns, 'itermsumabs2', itermsumabs2 );\n\n/**\n* @name iterprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/prod}\n*/\nimport iterprod from '@stdlib/stats-iter-prod';\nsetReadOnly( ns, 'iterprod', iterprod );\n\n/**\n* @name iterrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/range}\n*/\nimport iterrange from '@stdlib/stats-iter-range';\nsetReadOnly( ns, 'iterrange', iterrange );\n\n/**\n* @name iterstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/stdev}\n*/\nimport iterstdev from '@stdlib/stats-iter-stdev';\nsetReadOnly( ns, 'iterstdev', iterstdev );\n\n/**\n* @name itersum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sum}\n*/\nimport itersum from '@stdlib/stats-iter-sum';\nsetReadOnly( ns, 'itersum', itersum );\n\n/**\n* @name itersumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sumabs}\n*/\nimport itersumabs from '@stdlib/stats-iter-sumabs';\nsetReadOnly( ns, 'itersumabs', itersumabs );\n\n/**\n* @name itersumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sumabs2}\n*/\nimport itersumabs2 from '@stdlib/stats-iter-sumabs2';\nsetReadOnly( ns, 'itersumabs2', itersumabs2 );\n\n/**\n* @name itervariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/variance}\n*/\nimport itervariance from '@stdlib/stats-iter-variance';\nsetReadOnly( ns, 'itervariance', itervariance );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["defineProperty","Object","has_define_property_support","err","builtin","objectProtoype","prototype","toStr","toString","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","polyfill","obj","prop","descriptor","hasValue","hasGet","hasSet","call","TypeError","__proto__","value","Error","get","set","require$$1","require$$2","require$$0","main","configurable","enumerable","writable","lib","re","primitive","FLG","Symbol","hasSymbols","toStringTag","tostring","native_class","v","has","hasOwnProperty","property","toStrTag","hasOwnProp","isOwn","tag","out","Boolean","nativeClass","test","object","isPrimitive","isObject","setReadOnly","isBoolean","require$$3","codegen","Function","self_1","self","window_1","window","global","module","exports","getThis","Self","Win","Global","arguments","length","root","nodeList","document","childNodes","typedarray","Int8Array","RE","check_1","reFunctionName","isArray","Array","isObjectLike","predicate","len","i","arrayfun","REGEXP","isBuffer","_isBuffer","constructor","match","name","ctor","slice","exec","ctorName","typeOf","type","toLowerCase","isFunction","t","next","iterator","hasUint32Array","Uint32Array","isUint32Array","GlobalUint32Array","bool","arr","UINT32_MAX","hasFloat64Array","Float64Array","isFloat64Array","GlobalFloat64Array","NaN","hasUint8Array","Uint8Array","isUint8Array","GlobalUint8Array","UINT8_MAX","hasUint16Array","Uint16Array","isUint16Array","GlobalUint16Array","UINT16_MAX","uint16view","ctors","uint16","uint8","buffer","HIGH","FLOAT64_VIEW","UINT32_VIEW","x","high","Number","NEGATIVE_INFINITY","getHighWord","setHighWord","isnan","NINF","require$$4","polyvalP","polyvalQ","LN2_HI","LN2_LO","HIGH_SIGNIFICAND_MASK","ln_1","hfsq","hx","t1","k","R","f","j","s","w","z","Math","floor","ceil","POSITIVE_INFINITY","PINF","LOW","indices","fcn","low","toWords","fromWords","WORDS","abs","isInfinite","require$$6","require$$7","copysign","y","hy","normalize","floatExp","require$$11","FRAC","frac","exp","m","ldexp","trunc","expmulti","hi","lo","r","c","LOG2_E","NEARZERO","ln","sum","N","isIteratorLike","iteratorSymbol","incrgmean","itercugmean","iter","acc","done","mu","incrmean","mean","incrhmean","itercuhmean","isPositiveZero","max","incrmax","itercumax","incrmaxabs","itercumaxabs","itercumean","incrmeanabs","itercumeanabs","incrmeanabs2","itercumeanabs2","min","incrmidrange","itercumidrange","isNegativeZero","incrmin","itercumin","incrminabs","itercuminabs","X","frexp_1","frexp","PARTS","prod","incrprod","itercuprod","range","incrrange","itercurange","ccs","cs","cc","incrsum","itercusum","incrsumabs","itercusumabs","incrsumabs2","itercusumabs2","isNumber","isInt","integer","valueOf","isInteger","isPositiveInteger","W","buf","require$$5","incrmmax","itermmax","incrmmaxabs","itermmaxabs","delta","incrmmean","itermmean","incrmmeanabs","itermmeanabs","incrmmeanabs2","itermmeanabs2","incrmmidrange","itermmidrange","incrmmin","itermmin","incrmminabs","itermminabs","product","workspace","parts","incrmprod","itermprod","incrmrange","itermrange","incrmsum","itermsum","incrmsumabs","itermsumabs","incrmsumabs2","itermsumabs2","sqrt","M2","accumulator2","accumulator1","incrstdev","incrvariance","ns","itermax","itermaxabs","itermean","itermeanabs","itermeanabs2","itermidrange","itermin","iterminabs","iterprod","iterrange","iterstdev","itersum","itersumabs","itersumabs2","itervariance"],"mappings":"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"}