{"version":3,"file":"index.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/re.js","../node_modules/@stdlib/assert-is-boolean/lib/primitive.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/native_class.js","../node_modules/@stdlib/assert-is-boolean/lib/tostring.js","../node_modules/@stdlib/assert-is-boolean/lib/object.js","../node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js","../node_modules/@stdlib/assert-is-boolean/lib/main.js","../node_modules/@stdlib/utils-global/lib/codegen.js","../node_modules/@stdlib/assert-is-boolean/lib/index.js","../node_modules/@stdlib/utils-global/lib/self.js","../node_modules/@stdlib/utils-global/lib/window.js","../node_modules/@stdlib/utils-global/lib/global.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js","../node_modules/@stdlib/utils-global/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js","../node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/assert-tools-array-function/lib/arrayfcn.js","../node_modules/@stdlib/utils-type-of/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/check.js","../node_modules/@stdlib/utils-type-of/lib/polyfill.js","../node_modules/@stdlib/utils-type-of/lib/typeof.js","../node_modules/@stdlib/assert-is-function/lib/main.js","../node_modules/@stdlib/assert-is-iterator-like/lib/main.js","../node_modules/@stdlib/symbol-iterator/lib/main.js","../node_modules/@stdlib/assert-has-iterator-symbol-support/lib/main.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/constants-uint32-max/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/constants-uint8-max/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/array-uint8/lib/uint8array.js","../node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/constants-uint16-max/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/array-uint16/lib/uint16array.js","../node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js","../node_modules/@stdlib/number-ctor/lib/number.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-special-ln/lib/ln.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-special-ceil/lib/main.js","../node_modules/@stdlib/math-base-special-trunc/lib/main.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-sign-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-to-words/lib/assign.js","../node_modules/@stdlib/number-float64-base-to-words/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/main.js","../node_modules/@stdlib/math-base-special-copysign/lib/main.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/number-float64-base-normalize/lib/assign.js","../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/main.js","../node_modules/@stdlib/number-float64-base-exponent/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js","../node_modules/@stdlib/math-base-special-ldexp/lib/main.js","../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-high-word-abs-mask/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/math-base-special-exp/lib/exp.js","../node_modules/@stdlib/math-base-special-exp/lib/expmulti.js","../node_modules/@stdlib/math-base-special-exp/lib/polyval_p.js","../node_modules/@stdlib/stats-incr-mean/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/stats-incr-max/lib/main.js","../node_modules/@stdlib/stats-incr-maxabs/lib/main.js","../node_modules/@stdlib/stats-incr-meanabs/lib/main.js","../node_modules/@stdlib/stats-incr-meanabs2/lib/main.js","../node_modules/@stdlib/stats-incr-midrange/lib/main.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/stats-incr-min/lib/main.js","../node_modules/@stdlib/stats-incr-minabs/lib/main.js","../node_modules/@stdlib/math-base-special-frexp/lib/assign.js","../node_modules/@stdlib/math-base-special-frexp/lib/index.js","../node_modules/@stdlib/math-base-special-frexp/lib/main.js","../node_modules/@stdlib/stats-incr-prod/lib/main.js","../node_modules/@stdlib/stats-incr-range/lib/main.js","../node_modules/@stdlib/stats-incr-sum/lib/main.js","../node_modules/@stdlib/stats-incr-sumabs/lib/main.js","../node_modules/@stdlib/stats-incr-sumabs2/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/integer.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/is_integer.js","../node_modules/@stdlib/assert-is-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-integer/lib/object.js","../node_modules/@stdlib/assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-positive-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-positive-integer/lib/object.js","../node_modules/@stdlib/assert-is-positive-integer/lib/main.js","../node_modules/@stdlib/stats-incr-mmax/lib/main.js","../node_modules/@stdlib/stats-incr-mmean/lib/main.js","../node_modules/@stdlib/stats-incr-mmin/lib/main.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/assert-is-integer/lib/index.js","../node_modules/@stdlib/assert-is-positive-integer/lib/index.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/stats-incr-mprod/lib/main.js","../node_modules/@stdlib/stats-incr-msum/lib/main.js","../node_modules/@stdlib/math-base-special-sqrt/lib/main.js","../node_modules/@stdlib/stats-incr-stdev/lib/main.js","../node_modules/@stdlib/stats-incr-variance/lib/main.js","../lib/index.js","../node_modules/@stdlib/stats-iter-cugmean/lib/main.js","../node_modules/@stdlib/stats-incr-gmean/lib/main.js","../node_modules/@stdlib/stats-iter-cuhmean/lib/main.js","../node_modules/@stdlib/stats-incr-hmean/lib/main.js","../node_modules/@stdlib/stats-iter-cumax/lib/main.js","../node_modules/@stdlib/stats-iter-cumaxabs/lib/main.js","../node_modules/@stdlib/stats-iter-cumean/lib/main.js","../node_modules/@stdlib/stats-iter-cumeanabs/lib/main.js","../node_modules/@stdlib/stats-iter-cumeanabs2/lib/main.js","../node_modules/@stdlib/stats-iter-cumidrange/lib/main.js","../node_modules/@stdlib/stats-iter-cumin/lib/main.js","../node_modules/@stdlib/stats-iter-cuminabs/lib/main.js","../node_modules/@stdlib/stats-iter-cuprod/lib/main.js","../node_modules/@stdlib/stats-iter-curange/lib/main.js","../node_modules/@stdlib/stats-iter-cusum/lib/main.js","../node_modules/@stdlib/stats-iter-cusumabs/lib/main.js","../node_modules/@stdlib/stats-iter-cusumabs2/lib/main.js","../node_modules/@stdlib/stats-iter-max/lib/main.js","../node_modules/@stdlib/stats-iter-maxabs/lib/main.js","../node_modules/@stdlib/stats-iter-mean/lib/main.js","../node_modules/@stdlib/stats-iter-meanabs/lib/main.js","../node_modules/@stdlib/stats-iter-meanabs2/lib/main.js","../node_modules/@stdlib/stats-iter-midrange/lib/main.js","../node_modules/@stdlib/stats-iter-min/lib/main.js","../node_modules/@stdlib/stats-iter-minabs/lib/main.js","../node_modules/@stdlib/stats-iter-mmax/lib/main.js","../node_modules/@stdlib/stats-iter-mmaxabs/lib/main.js","../node_modules/@stdlib/stats-incr-mmaxabs/lib/main.js","../node_modules/@stdlib/stats-iter-mmean/lib/main.js","../node_modules/@stdlib/stats-iter-mmeanabs/lib/main.js","../node_modules/@stdlib/stats-incr-mmeanabs/lib/main.js","../node_modules/@stdlib/stats-iter-mmeanabs2/lib/main.js","../node_modules/@stdlib/stats-incr-mmeanabs2/lib/main.js","../node_modules/@stdlib/stats-iter-mmidrange/lib/main.js","../node_modules/@stdlib/stats-incr-mmidrange/lib/main.js","../node_modules/@stdlib/stats-iter-mmin/lib/main.js","../node_modules/@stdlib/stats-iter-mminabs/lib/main.js","../node_modules/@stdlib/stats-incr-mminabs/lib/main.js","../node_modules/@stdlib/stats-iter-mprod/lib/main.js","../node_modules/@stdlib/stats-iter-mrange/lib/main.js","../node_modules/@stdlib/stats-incr-mrange/lib/main.js","../node_modules/@stdlib/stats-iter-msum/lib/main.js","../node_modules/@stdlib/stats-iter-msumabs/lib/main.js","../node_modules/@stdlib/stats-incr-msumabs/lib/main.js","../node_modules/@stdlib/stats-iter-msumabs2/lib/main.js","../node_modules/@stdlib/stats-incr-msumabs2/lib/main.js","../node_modules/@stdlib/stats-iter-prod/lib/main.js","../node_modules/@stdlib/stats-iter-range/lib/main.js","../node_modules/@stdlib/stats-iter-stdev/lib/main.js","../node_modules/@stdlib/stats-iter-sum/lib/main.js","../node_modules/@stdlib/stats-iter-sumabs/lib/main.js","../node_modules/@stdlib/stats-iter-sumabs2/lib/main.js","../node_modules/@stdlib/stats-iter-variance/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property';\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js';\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar RE = /./;\n\n\n// EXPORTS //\n\nexport default RE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a boolean primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean primitive\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( true ) );\n* // returns false\n*/\nfunction isBoolean( value ) {\n\treturn ( typeof value === 'boolean' );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support';\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class';\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport builtin from './native_class.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar nativeClass;\nif ( hasToStringTag() ) {\n\tnativeClass = polyfill;\n} else {\n\tnativeClass = builtin;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport toStringTag from './tostringtag.js';\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Boolean.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean object\n*\n* @example\n* var bool = isBoolean( true );\n* // returns false\n*\n* @example\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Boolean ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Boolean]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a boolean\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( true ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the global object using code generation.\n*\n* @private\n* @returns {Object} global object\n*/\nfunction getGlobal() {\n\treturn new Function( 'return this;' )(); // eslint-disable-line no-new-func\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a boolean.\n*\n* @module @stdlib/assert-is-boolean\n*\n* @example\n* import isBoolean from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* // Use interface to check for boolean primitives...\n* import { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( true ) );\n* // returns false\n*\n* @example\n* // Use interface to check for boolean objects...\n* import { isObject as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( true );\n* // returns false\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isBoolean from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isBoolean, 'isPrimitive', isPrimitive );\nsetReadOnly( isBoolean, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof self === 'object' ) ? self : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof window === 'object' ) ? window : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof global === 'object' ) ? global : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getGlobal from '@stdlib/utils-global';\n\n\n// MAIN //\n\nvar root = getGlobal();\nvar nodeList = root.document && root.document.childNodes;\n\n\n// EXPORTS //\n\nexport default nodeList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport getThis from './codegen.js';\nimport Self from './self.js';\nimport Win from './window.js';\nimport Global from './global.js';\n\n\n// MAIN //\n\n/**\n* Returns the global object.\n*\n* ## Notes\n*\n* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.\n*\n* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object\n* @throws {TypeError} must provide a boolean\n* @throws {Error} unable to resolve global object\n* @returns {Object} global object\n*\n* @example\n* var g = getGlobal();\n* // returns {...}\n*/\nfunction getGlobal( codegen ) {\n\tif ( arguments.length ) {\n\t\tif ( !isBoolean( codegen ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a boolean primitive. Value: `'+codegen+'`.' );\n\t\t}\n\t\tif ( codegen ) {\n\t\t\treturn getThis();\n\t\t}\n\t\t// Fall through...\n\t}\n\t// Case: browsers and web workers\n\tif ( Self ) {\n\t\treturn Self;\n\t}\n\t// Case: browsers\n\tif ( Win ) {\n\t\treturn Win;\n\t}\n\t// Case: Node.js\n\tif ( Global ) {\n\t\treturn Global;\n\t}\n\t// Case: unknown\n\tthrow new Error( 'unexpected error. Unable to resolve global object.' );\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar typedarray = Int8Array; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default typedarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reFunctionName from './main.js';\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nexport default RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* import reFunctionName from '@stdlib/regexp-function-name';\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport reFunctionName from './main.js';\nimport REGEXP from './regexp.js';\n\n\n// MAIN //\n\nsetReadOnly( reFunctionName, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport { REGEXP as RE } from '@stdlib/regexp-function-name';\nimport isBuffer from '@stdlib/assert-is-buffer';\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nexport default constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* import isObjectLike from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* import { isObjectLikeArray as isObjectLike } from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-function';\nimport isObjectLike from './main.js';\n\n\n// VARIABLES //\n\nvar isObjectLikeArray = arrayfun( isObjectLike );\n\n\n// MAIN //\n\nsetReadOnly( isObjectLike, 'isObjectLikeArray', isObjectLikeArray );\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a function. Value: `' + predicate + '`.' );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine a value's type.\n*\n* @module @stdlib/utils-type-of\n*\n* @example\n* import typeOf from '@stdlib/utils-type-of';\n*\n* var str = typeOf( 'a' );\n* // returns 'string'\n*\n* str = typeOf( 5 );\n* // returns 'number'\n*/\n\n// MODULES //\n\nimport usePolyfill from './check.js';\nimport typeOf from './typeof.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main = ( usePolyfill() ) ? polyfill : typeOf;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE from './fixtures/re.js';\nimport nodeList from './fixtures/nodelist.js';\nimport typedarray from './fixtures/typedarray.js';\n\n\n// MAIN //\n\n/**\n* Checks whether a polyfill is needed when using the `typeof` operator.\n*\n* @private\n* @returns {boolean} boolean indicating whether a polyfill is needed\n*/\nfunction check() {\n\tif (\n\t\t// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\t\ttypeof RE === 'function' ||\n\n\t\t// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):\n\t\ttypeof typedarray === 'object' ||\n\n\t\t// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):\n\t\ttypeof nodeList === 'function'\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\treturn ctorName( v ).toLowerCase();\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// NOTES //\n\n/*\n* Built-in `typeof` operator behavior:\n*\n* ```text\n* typeof null => 'object'\n* typeof undefined => 'undefined'\n* typeof 'a' => 'string'\n* typeof 5 => 'number'\n* typeof NaN => 'number'\n* typeof true => 'boolean'\n* typeof false => 'boolean'\n* typeof {} => 'object'\n* typeof [] => 'object'\n* typeof function foo(){} => 'function'\n* typeof function* foo(){} => 'object'\n* typeof Symbol() => 'symbol'\n* ```\n*\n*/\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\tvar type;\n\n\t// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):\n\tif ( v === null ) {\n\t\treturn 'null';\n\t}\n\ttype = typeof v;\n\n\t// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.\n\tif ( type === 'object' ) {\n\t\treturn ctorName( v ).toLowerCase();\n\t}\n\treturn type;\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport typeOf from '@stdlib/utils-type-of';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a function.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a function\n*\n* @example\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\nfunction isFunction( value ) {\n\t// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.\n\treturn ( typeOf( value ) === 'function' );\n}\n\n\n// EXPORTS //\n\nexport default isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\n\n\n// MAIN //\n\n/**\n* Tests if a value is iterator-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is iterator-like\n*\n* @example\n* var it = {\n*     'next': function noop() {}\n* };\n* var bool = isIteratorLike( it );\n* // returns true\n*\n* @example\n* var bool = isIteratorLike( {} );\n* // returns false\n*\n* @example\n* var bool = isIteratorLike( null );\n* // returns false\n*/\nfunction isIteratorLike( value ) {\n\tvar t = typeof value;\n\treturn (\n\t\tvalue !== null &&\n\t\t( t === 'object' || t === 'function' ) &&\n\t\tisFunction( value.next )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isIteratorLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\n\n\n// MAIN //\n\n/**\n* Iterator symbol.\n*\n* @name IteratorSymbol\n* @constant\n* @type {(symbol|null)}\n*\n* @example\n* function iterator() {\n*     var it;\n*     var i;\n*\n*     i = -1;\n*\n*     it = {};\n*     it.next = next;\n*     it.return = done;\n*\n*     if ( IteratorSymbol ) {\n*         it[ IteratorSymbol ] = iterator;\n*     }\n*     return it;\n*\n*     function next() {\n*         i += 1;\n*         return {\n*             'value': i,\n*             'done': false\n*         };\n*     }\n*\n*     function done( value ) {\n*         if ( arguments.length === 0 ) {\n*             return {\n*                 'done': true\n*             };\n*         }\n*         return {\n*             'value': value,\n*             'done': true\n*         };\n*     }\n* }\n*\n* var obj = iterator();\n*/\nvar IteratorSymbol = ( hasIteratorSymbolSupport() ) ? Symbol.iterator : null;\n\n\n// EXPORTS //\n\nexport default IteratorSymbol;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\n\n\n// MAIN //\n\n/**\n* Tests for native `Symbol.iterator` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support\n*\n* @example\n* var bool = hasIteratorSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasIteratorSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol' &&\n\t\thasOwnProp( Symbol, 'iterator' ) &&\n\t\ttypeof Symbol.iterator === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasIteratorSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* import UINT32_MAX from '@stdlib/constants-uint32-max';\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nexport default UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* import ctor from '@stdlib/array-uint32';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nimport hasUint32ArraySupport from '@stdlib/assert-has-uint32array-support';\nimport builtin from './uint32array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport UINT32_MAX from '@stdlib/constants-uint32-max';\nimport GlobalUint32Array from './uint32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* import ctor from '@stdlib/array-float64';\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nimport hasFloat64ArraySupport from '@stdlib/assert-has-float64array-support';\nimport builtin from './float64array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64Array from '@stdlib/assert-is-float64array';\nimport GlobalFloat64Array from './float64array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants-uint8-max\n* @type {integer32}\n*\n* @example\n* import UINT8_MAX from '@stdlib/constants-uint8-max';\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* import ctor from '@stdlib/array-uint8';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport hasUint8ArraySupport from '@stdlib/assert-has-uint8array-support';\nimport builtin from './uint8array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8Array from '@stdlib/assert-is-uint8array';\nimport UINT8_MAX from '@stdlib/constants-uint8-max';\nimport GlobalUint8Array from './uint8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants-uint16-max\n* @type {integer32}\n*\n* @example\n* import UINT16_MAX from '@stdlib/constants-uint16-max';\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* import ctor from '@stdlib/array-uint16';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nimport hasUint16ArraySupport from '@stdlib/assert-has-uint16array-support';\nimport builtin from './uint16array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint16Array from '@stdlib/assert-is-uint16array';\nimport UINT16_MAX from '@stdlib/constants-uint16-max';\nimport GlobalUint16Array from './uint16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './ctors.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint16Array from '@stdlib/array-uint16';\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nexport default getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf'; // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants-float64-exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln( x ) {\n\tvar hfsq;\n\tvar hx;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: 0 < x < 2**-1022\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up `x`:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( ( hx>>20 ) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += ( i>>20 )|0; // asm type annotation\n\tf = x - 1.0;\n\tif ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn (k * LN2_HI) + (k * LN2_LO);\n\t\t}\n\t\tR = f * f * ( 0.5 - (ONE_THIRD*f) );\n\t\tif ( k === 0 ) {\n\t\t\treturn f - R;\n\t\t}\n\t\treturn (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\tif ( k === 0 ) {\n\t\t\treturn f - ( hfsq - (s * (hfsq+R)) );\n\t\t}\n\t\treturn (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );\n\t}\n\tif ( k === 0 ) {\n\t\treturn f - (s*(f-R));\n\t}\n\treturn (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );\n}\n\n\n// EXPORTS //\n\nexport default ln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceil( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceil( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceil( NaN );\n* // returns NaN\n*/\nvar ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default ceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = trunc( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = trunc( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = trunc( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = trunc( NaN );\n* // returns NaN\n*\n* @example\n* var v = trunc( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = trunc( -Infinity );\n* // returns -Infinity\n*/\nfunction trunc( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn ceil( x );\n\t}\n\treturn floor( x );\n}\n\n\n// EXPORTS //\n\nexport default trunc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bot of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= ABS_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default copysign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* import normalize from '@stdlib/number-float64-base-normalize';\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import normalize from '@stdlib/number-float64-base-normalize';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport EXP_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport MAX_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\nimport MAX_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-max-base2-exponent-subnormal';\nimport MIN_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport { assign as normalize } from '@stdlib/number-float64-base-normalize';\nimport floatExp from '@stdlib/number-float64-base-exponent';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ];\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\texp === 0 ||\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( frac, FRAC, 1, 0 );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords.assign( frac, WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-max-base2-exponent-subnormal';\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport expmulti from './expmulti.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01;\nvar LN2_LO = 1.90821492927058770002e-10;\nvar LOG2_E = 1.44269504088896338700e+00;\nvar OVERFLOW = 7.09782712893383973096e+02;\nvar UNDERFLOW = -7.45133219101941108420e+02;\nvar NEARZERO = 1.0 / (1 << 28); // 2^-28;\nvar NEG_NEARZERO = -NEARZERO;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural exponential function.\n*\n* ## Method\n*\n* 1.  We reduce \\\\( x \\\\) to an \\\\( r \\\\) so that \\\\( |r| \\leq 0.5 \\cdot \\ln(2) \\approx 0.34658 \\\\). Given \\\\( x \\\\), we find an \\\\( r \\\\) and integer \\\\( k \\\\) such that\n*\n*     ```tex\n*     \\begin{align*}\n*     x &= k \\cdot \\ln(2) + r \\\\\n*     |r| &\\leq 0.5 \\cdot \\ln(2)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     \\\\( r \\\\) can be represented as \\\\( r = \\mathrm{hi} - \\mathrm{lo} \\\\) for better accuracy.\n*\n*     <!-- </note> -->\n*\n* 2.  We approximate of \\\\( e^{r} \\\\) by a special rational function on the interval \\\\(\\[0,0.34658]\\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     R\\left(r^2\\right) &= r \\cdot \\frac{ e^{r}+1 }{ e^{r}-1 } \\\\\n*     &= 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.34658]\\\\) to generate a polynomial of degree \\\\(5\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-59}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5\n*     ```\n*\n*     where \\\\( z = r^2 \\\\) and\n*\n*     ```tex\n*     \\left|  2 + P_1 z + \\ldots + P_5 z^5  - R(z) \\right| \\leq 2^{-59}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\( P_1 \\\\) to \\\\( P_5 \\\\) are listed in the source code.\n*\n*     <!-- </note> -->\n*\n*     The computation of \\\\( e^{r} \\\\) thus becomes\n*\n*     ```tex\n*     \\begin{align*}\n*     e^{r} &= 1 + \\frac{2r}{R-r} \\\\\n*           &= 1 + r + \\frac{r \\cdot R_1(r)}{2 - R_1(r)}\\ \\text{for better accuracy}\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     R_1(r) = r - P_1\\ r^2 + P_2\\ r^4 + \\ldots + P_5\\ r^{10}\n*     ```\n*\n* 3.  We scale back to obtain \\\\( e^{x} \\\\). From step 1, we have\n*\n*     ```tex\n*     e^{x} = 2^k e^{r}\n*     ```\n*\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* e^\\infty &= \\infty \\\\\n* e^{-\\infty} &= 0 \\\\\n* e^{\\mathrm{NaN}} &= \\mathrm{NaN} \\\\\n* e^0 &= 1\\ \\mathrm{is\\ exact\\ for\\ finite\\ argument\\ only}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   For an IEEE double,\n*\n*     -   if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) overflows\n*     -   if \\\\(x < -7.45133219101941108420\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) underflows\n*\n* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp( 4.0 );\n* // returns ~54.5982\n*\n* @example\n* var v = exp( -9.0 );\n* // returns ~1.234e-4\n*\n* @example\n* var v = exp( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp( NaN );\n* // returns NaN\n*/\nfunction exp( x ) {\n\tvar hi;\n\tvar lo;\n\tvar k;\n\n\tif ( isnan( x ) || x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > OVERFLOW ) {\n\t\treturn PINF;\n\t}\n\tif ( x < UNDERFLOW ) {\n\t\treturn 0.0;\n\t}\n\tif (\n\t\tx > NEG_NEARZERO &&\n\t\tx < NEARZERO\n\t) {\n\t\treturn 1.0 + x;\n\t}\n\t// Reduce and compute `r = hi - lo` for extra precision.\n\tif ( x < 0.0 ) {\n\t\tk = trunc( (LOG2_E*x) - 0.5 );\n\t} else {\n\t\tk = trunc( (LOG2_E*x) + 0.5 );\n\t}\n\thi = x - (k*LN2_HI);\n\tlo = k * LN2_LO;\n\n\treturn expmulti( hi, lo, k );\n}\n\n\n// EXPORTS //\n\nexport default exp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport polyvalP from './polyval_p.js';\n\n\n// MAIN //\n\n/**\n* Computes \\\\(e^{r} 2^k\\\\) where \\\\(r = \\mathrm{hi} - \\mathrm{lo}\\\\) and \\\\(|r| \\leq \\ln(2)/2\\\\).\n*\n* @private\n* @param {number} hi - upper bound\n* @param {number} lo - lower bound\n* @param {integer} k - power of 2\n* @returns {number} function value\n*/\nfunction expmulti( hi, lo, k ) {\n\tvar r;\n\tvar t;\n\tvar c;\n\tvar y;\n\n\tr = hi - lo;\n\tt = r * r;\n\tc = r - ( t*polyvalP( t ) );\n\ty = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);\n\n\treturn ldexp( y, k );\n}\n\n\n// EXPORTS //\n\nexport default expmulti;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean.\n*\n* ## Method\n*\n* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu_n &= \\frac{1}{n} \\sum_{i=0}^{n-1} x_i \\\\\n*           &= \\frac{1}{n} \\biggl(x_{n-1} + \\sum_{i=0}^{n-2} x_i \\biggr) \\\\\n*           &= \\frac{1}{n} (x_{n-1} + (n-1)\\mu_{n-1}) \\\\\n*           &= \\mu_{n-1} + \\frac{1}{n} (x_{n-1} - \\mu_{n-1})\n*     \\end{align*}\n*     ```\n*\n* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator();\n* // returns -1.5\n*/\nfunction incrmean() {\n\tvar mu;\n\tvar N;\n\n\tmu = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\tN += 1;\n\t\tmu += (x-mu) / N;\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a maximum value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmax();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 3.14\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\nfunction incrmax() {\n\tvar max;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum value. If not provided a value, the accumulator function returns the current max.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} max value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( max === void 0 ) ? null : max;\n\t\t}\n\t\tif (\n\t\t\tmax === void 0 ||\n\t\t\tx > max ||\n\t\t\tisnan( x ) ||\n\t\t\t( x === max && isPositiveZero( x ) )\n\t\t) {\n\t\t\tmax = x;\n\t\t}\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport incrmax from '@stdlib/stats-incr-max';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a maximum absolute value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmaxabs();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 5.0\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\nfunction incrmaxabs() {\n\tvar max = incrmax();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} maximum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn max();\n\t\t}\n\t\treturn max( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport incrmean from '@stdlib/stats-incr-mean';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean of absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanabs();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator();\n* // returns 3.5\n*/\nfunction incrmeanabs() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrmean from '@stdlib/stats-incr-mean';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanabs2();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator();\n* // returns 14.5\n*/\nfunction incrmeanabs2() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a mid-range.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmidrange();\n*\n* var midrange = accumulator();\n* // returns null\n*\n* midrange = accumulator( 3.14 );\n* // returns 3.14\n*\n* midrange = accumulator( -5.0 );\n* // returns ~-0.93\n*\n* midrange = accumulator( 10.1 );\n* // returns 2.55\n*\n* midrange = accumulator();\n* // returns 2.55\n*/\nfunction incrmidrange() {\n\tvar max = NINF;\n\tvar min = PINF;\n\tvar sum;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {number} mid-range\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( sum === void 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sum / 2.0;\n\t\t}\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\tsum = max + min;\n\t\treturn sum / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a minimum value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmin();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns -5.0\n*\n* min = accumulator( 10.1 );\n* // returns -5.0\n*\n* min = accumulator();\n* // returns -5.0\n*/\nfunction incrmin() {\n\tvar min;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum value. If not provided a value, the accumulator function returns the current min.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} min value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( min === void 0 ) ? null : min;\n\t\t}\n\t\tif (\n\t\t\tmin === void 0 ||\n\t\t\tx < min ||\n\t\t\tisnan( x ) ||\n\t\t\t( x === min && isNegativeZero( x ) )\n\t\t) {\n\t\t\tmin = x;\n\t\t}\n\t\treturn min;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport incrmin from '@stdlib/stats-incr-min';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a minimum absolute value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminabs();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns 3.14\n*\n* min = accumulator( 10.1 );\n* // returns 3.14\n*\n* min = accumulator();\n* // returns 3.14\n*/\nfunction incrminabs() {\n\tvar min = incrmin();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} minimum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn min();\n\t\t}\n\t\treturn min( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport { assign as normalize } from '@stdlib/number-float64-base-normalize';\nimport floatExp from '@stdlib/number-float64-base-exponent';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Exponent equal to 1022 (BIAS-1): 0 01111111110 00000000000000000000 => 1071644672\nvar SET_EXP_MASK = 0x3fe00000|0; // asm type annotation\n\n// Normalization workspace:\nvar X = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = frexp( 4.0, new Array( 2 ), 1, 0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexp( 0.0, new Array( 2 ), 1, 0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( -0.0, new Array( 2 ), 1, 0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( NaN, new Array( 2 ), 1, 0 );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( Infinity, new Array( 2 ), 1, 0 );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( -Infinity, new Array( 2 ), 1, 0 );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( x, out, stride, offset ) {\n\tvar high;\n\tvar exp;\n\tif (\n\t\tx === 0.0 || // handles -0\n\t\tisnan( x ) ||\n\t\tisInfinite( x )\n\t) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\t// If `x` is subnormal, normalize it...\n\tnormalize( x, X, 1, 0 );\n\n\t// Extract the exponent from `x` and add the normalization exponent:\n\texp = floatExp( X[0] ) + X[ 1 ] + 1;\n\n\t// Break `x` into two unsigned 32-bit integers (higher and lower order words):\n\ttoWords.assign( X[ 0 ], WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits within the higher order word to BIAS-1 (1023-1=1022):\n\thigh |= SET_EXP_MASK;\n\n\t// Create a new floating-point number:\n\tx = fromWords( high, WORDS[ 1 ] );\n\n\tout[ offset ] = x;\n\tout[ offset + stride ] = exp;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @module @stdlib/math-base-special-frexp\n*\n* @example\n* import frexp from '@stdlib/math-base-special-frexp';\n*\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import frexp from '@stdlib/math-base-special-frexp';\n*\n* var out = new Float64Array( 2 );\n*\n* var y = frexp.assign( 4.0, out, 1, 0 );\n* // returns <Float64Array>[ 0.5, 3 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as frexp } from '@stdlib/math-base-special-frexp';\nimport ldexp from '@stdlib/math-base-special-ldexp';\n\n\n// VARIABLES //\n\n// `frexp` workspace:\nvar PARTS = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a product.\n*\n* ## Method\n*\n* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.\n*\n* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).\n*\n*\n* ## References\n*\n* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrprod();\n*\n* var prod = accumulator();\n* // returns null\n*\n* prod = accumulator( 2.0 );\n* // returns 2.0\n*\n* prod = accumulator( -5.0 );\n* // returns -10.0\n*\n* prod = accumulator();\n* // returns -10.0\n*/\nfunction incrprod() {\n\tvar frac;\n\tvar prod;\n\tvar exp;\n\n\t// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):\n\tfrac = 0.5;\n\texp = 1.0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated product. If not provided a value, the accumulator function returns the current product.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} product or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( prod === void 0 ) ? null : prod;\n\t\t}\n\t\t// Split the incoming value into a normalized fraction and exponent:\n\t\tfrexp( x, PARTS, 1, 0 );\n\n\t\t// Update the accumulated fraction:\n\t\tfrac *= PARTS[ 0 ];\n\n\t\t// Update the accumulated exponent:\n\t\texp += PARTS[ 1 ];\n\n\t\t// Ensure fraction remains normalized to avoid overflow/underflow...\n\t\tif ( frac > -0.5 && frac < 0.5 ) {\n\t\t\tfrexp( frac, PARTS, 1, 0 );\n\t\t\tfrac = PARTS[ 0 ];\n\t\t\texp += PARTS[ 1 ];\n\t\t}\n\t\tprod = ldexp( frac, exp );\n\t\treturn prod;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a range.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrrange();\n*\n* var range = accumulator();\n* // returns null\n*\n* range = accumulator( 3.14 );\n* // returns 0.0\n*\n* range = accumulator( -5.0 );\n* // returns 8.14\n*\n* range = accumulator( 10.1 );\n* // returns 15.1\n*\n* range = accumulator();\n* // returns 15.1\n*/\nfunction incrrange() {\n\tvar range;\n\tvar max = NINF;\n\tvar min = PINF;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( range === void 0 ) ? null : range;\n\t\t}\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\trange = max - min;\n\t\treturn range;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum.\n*\n* ## Method\n*\n* -   This implementation uses a second-order \"iterative Kahan–Babuška algorithm\", as proposed by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsum();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator();\n* // returns -3.0\n*/\nfunction incrsum() {\n\tvar sum;\n\tvar ccs;\n\tvar FLG;\n\tvar cs;\n\tvar cc;\n\tvar t;\n\tvar c;\n\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum+cs+ccs : null;\n\t\t}\n\t\tFLG = true;\n\t\tt = sum + x;\n\t\tif ( abs( sum ) >= abs( x ) ) {\n\t\t\tc = (sum-t) + x;\n\t\t} else {\n\t\t\tc = (x-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\treturn sum + cs + ccs;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\nfunction incrsumabs() {\n\tvar sum = 0.0;\n\tvar FLG;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum : null;\n\t\t}\n\t\tFLG = true;\n\t\tsum += abs( x );\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\nfunction incrsumabs2() {\n\tvar sum = 0.0;\n\tvar FLG;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum : null;\n\t\t}\n\t\tFLG = true;\n\t\tsum += x * x;\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Number from '@stdlib/number-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isInt from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a number primitive is an integer value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a number primitive is an integer value\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tvalue < PINF &&\n\t\tvalue > NINF &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having an integer value\n*\n* @example\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having an integer value\n*\n* @example\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an integer\n*\n* @example\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isInteger( null );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a positive integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a positive integer\n*\n* @example\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( null );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmax( W ) {\n\tvar buf;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum. If not provided a value, the accumulator function returns the current maximum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx > max ||\n\t\t\t\t( x === max && isPositiveZero( x ) )\n\t\t\t) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or greater than current maximum value...\n\t\telse if ( isnan( x ) || x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: outgoing value is the current maximum and the new value is less than the maximum, and, thus, we need to find a new maximum among the current values...\n\t\telse if ( ( buf[ i ] === max && x < max ) || isnan( buf[ i ] ) ) {\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current maximum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === max && x === max && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\tmax = x;\n\t\t\t} else if ( isPositiveZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\tmax = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both negative zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the maximum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmean( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator( 3.0 );\n* // returns 0.0\n*\n* mu = accumulator( 5.0 );\n* // returns 1.0\n*\n* mu = accumulator();\n* // returns 1.0\n*/\nfunction incrmmean( W ) {\n\tvar delta;\n\tvar buf;\n\tvar mu;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmu = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding mean is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the sample mean...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tbreak; // mean is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current mean nor the incoming value are NaN, so we need to update the sample mean...\n\t\telse if ( isnan( mu ) === false ) {\n\t\t\tdelta = x - buf[ i ];\n\t\t\tmu += delta / W;\n\t\t}\n\t\t// Case: the current mean is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving minimum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmin( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns -5.0\n*\n* m = accumulator( 3.0 );\n* // returns -5.0\n*\n* m = accumulator( 5.0 );\n* // returns -5.0\n*\n* m = accumulator();\n* // returns -5.0\n*/\nfunction incrmmin( W ) {\n\tvar buf;\n\tvar min;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum. If not provided a value, the accumulator function returns the current minimum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} minimum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn min;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx < min ||\n\t\t\t\t( x === min && isNegativeZero( x ) )\n\t\t\t) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or less than current minimum value...\n\t\telse if ( isnan( x ) || x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: outgoing value is the current minimum and the new value is greater than the minimum, and, thus, we need to find a new minimum among the current values...\n\t\telse if ( ( buf[ i ] === min && x > min ) || isnan( buf[ i ] ) ) {\n\t\t\tmin = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === min && x === min && x === 0.0 ) {\n\t\t\tif ( isNegativeZero( x ) ) {\n\t\t\t\tmin = x;\n\t\t\t} else if ( isNegativeZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...\n\t\t\t\tmin = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isNegativeZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmin = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both positive zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the minimum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn min;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* import isNumber from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isNumber from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isNumber, 'isPrimitive', isPrimitive );\nsetReadOnly( isNumber, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an integer.\n*\n* @module @stdlib/assert-is-integer\n*\n* @example\n* import isInteger from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isInteger( -3.14 );\n* // returns false\n*\n* bool = isInteger( null );\n* // returns false\n*\n* @example\n* // Use interface to check for integer primitives...\n* import { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* // Use interface to check for integer objects...\n* import { isObject as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isInteger from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isInteger, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a positive integer.\n*\n* @module @stdlib/assert-is-positive-integer\n*\n* @example\n* import isPositiveInteger from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* bool = isPositiveInteger( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPositiveInteger from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isPositiveInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isPositiveInteger, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar tokens;\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\ttokens = tokenize( str );\n\targs = new Array( arguments.length );\n\targs[ 0 ] = tokens;\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\targs[ i ] = arguments[ i ];\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport { assign as frexp } from '@stdlib/math-base-special-frexp';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport Float64Array from '@stdlib/array-float64';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Computes an updated product.\n*\n* @private\n* @param {Array} workspace - workspace array\n* @param {Object} acc - accumulated fractional and exponent parts\n* @param {number} x - multiplicative factor\n* @returns {number} product\n*/\nfunction product( workspace, acc, x ) {\n\t// Split the incoming value into a normalized fraction and exponent:\n\tfrexp( x, workspace, 1, 0 );\n\n\t// Update the accumulated fraction:\n\tacc.frac *= workspace[ 0 ];\n\n\t// Update the accumulated exponent:\n\tacc.exp += workspace[ 1 ];\n\n\t// Ensure fraction remains normalized to avoid overflow/underflow...\n\tif ( acc.frac > -0.5 && acc.frac < 0.5 ) {\n\t\tfrexp( acc.frac, workspace, 1, 0 );\n\t\tacc.frac = workspace[ 0 ];\n\t\tacc.exp += workspace[ 1 ];\n\t}\n\treturn ldexp( acc.frac, acc.exp );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving product.\n*\n* ## Method\n*\n* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.\n*\n* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).\n*\n*\n* ## References\n*\n* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmprod( 3 );\n*\n* var p = accumulator();\n* // returns null\n*\n* p = accumulator( 2.0 );\n* // returns 2.0\n*\n* p = accumulator( -5.0 );\n* // returns -10.0\n*\n* p = accumulator( 3.0 );\n* // returns -30.0\n*\n* p = accumulator( 5.0 );\n* // returns -75.0\n*\n* p = accumulator();\n* // returns -75.0\n*/\nfunction incrmprod( W ) {\n\tvar parts;\n\tvar prod;\n\tvar buf;\n\tvar acc;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\ti = -1;\n\tN = 0;\n\n\t// Initialize a workspace for `frexp`:\n\tparts = [ 0.0, 0 ];\n\n\t// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):\n\tprod = 1.0;\n\tacc = {};\n\tacc.frac = 0.5;\n\tacc.exp = 1.0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated prodct. If not provided a value, the accumulator function returns the current prodct.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} product or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn prod;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tprod = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tprod = product( parts, acc, x );\n\t\t}\n\t\t// Case: outgoing value is a \"special\" value, and, thus, we need to compute the accumulated value...\n\t\telse if (\n\t\t\tbuf[ i ] === 0.0 ||\n\t\t\tisnan( buf[ i ] ) ||\n\t\t\tisInfinite( buf[ i ] )\n\t\t) {\n\t\t\tN = 1;\n\t\t\tacc.frac = 0.5;\n\t\t\tacc.exp = 1.0;\n\t\t\tproduct( parts, acc, x );\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tprod = NaN;\n\t\t\t\t\t\tbreak; // product is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tprod = product( parts, acc, v );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( prod ) === false ) {\n\t\t\tv = x / buf[ i ];\n\t\t\tprod = product( parts, acc, v );\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\treturn prod;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsum( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator( 3.0 );\n* // returns 0.0\n*\n* sum = accumulator( 5.0 );\n* // returns 3.0\n*\n* sum = accumulator();\n* // returns 3.0\n*/\nfunction incrmsum( W ) {\n\tvar buf;\n\tvar sum;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tsum = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tsum = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tsum += x;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated value...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tsum = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tsum = NaN;\n\t\t\t\t\t\tbreak; // sum is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tsum += buf[ k ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( sum ) === false ) {\n\t\t\tsum += x - buf[ i ];\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a corrected sample standard deviation.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator();\n* // returns ~4.95\n*\n* @example\n* var accumulator = incrstdev( 3.0 );\n*/\nfunction incrstdev( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn sqrt( M2/(N-1) );\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x-mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn sqrt( M2/(N-1) );\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sqrt( M2/N );\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn sqrt( M2/N );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an unbiased sample variance.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrvariance();\n*\n* var s2 = accumulator();\n* // returns null\n*\n* s2 = accumulator( 2.0 );\n* // returns 0.0\n*\n* s2 = accumulator( -5.0 );\n* // returns 24.5\n*\n* s2 = accumulator();\n* // returns 24.5\n*\n* @example\n* var accumulator = incrvariance( 3.14 );\n*/\nfunction incrvariance( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn M2 / (N-1);\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn M2 / (N-1);\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn M2 / N;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn M2 / N;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name itercugmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cugmean}\n*/\nimport itercugmean from '@stdlib/stats-iter-cugmean';\nsetReadOnly( ns, 'itercugmean', itercugmean );\n\n/**\n* @name itercuhmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuhmean}\n*/\nimport itercuhmean from '@stdlib/stats-iter-cuhmean';\nsetReadOnly( ns, 'itercuhmean', itercuhmean );\n\n/**\n* @name itercumax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumax}\n*/\nimport itercumax from '@stdlib/stats-iter-cumax';\nsetReadOnly( ns, 'itercumax', itercumax );\n\n/**\n* @name itercumaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumaxabs}\n*/\nimport itercumaxabs from '@stdlib/stats-iter-cumaxabs';\nsetReadOnly( ns, 'itercumaxabs', itercumaxabs );\n\n/**\n* @name itercumean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumean}\n*/\nimport itercumean from '@stdlib/stats-iter-cumean';\nsetReadOnly( ns, 'itercumean', itercumean );\n\n/**\n* @name itercumeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumeanabs}\n*/\nimport itercumeanabs from '@stdlib/stats-iter-cumeanabs';\nsetReadOnly( ns, 'itercumeanabs', itercumeanabs );\n\n/**\n* @name itercumeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumeanabs2}\n*/\nimport itercumeanabs2 from '@stdlib/stats-iter-cumeanabs2';\nsetReadOnly( ns, 'itercumeanabs2', itercumeanabs2 );\n\n/**\n* @name itercumidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumidrange}\n*/\nimport itercumidrange from '@stdlib/stats-iter-cumidrange';\nsetReadOnly( ns, 'itercumidrange', itercumidrange );\n\n/**\n* @name itercumin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumin}\n*/\nimport itercumin from '@stdlib/stats-iter-cumin';\nsetReadOnly( ns, 'itercumin', itercumin );\n\n/**\n* @name itercuminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuminabs}\n*/\nimport itercuminabs from '@stdlib/stats-iter-cuminabs';\nsetReadOnly( ns, 'itercuminabs', itercuminabs );\n\n/**\n* @name itercuprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuprod}\n*/\nimport itercuprod from '@stdlib/stats-iter-cuprod';\nsetReadOnly( ns, 'itercuprod', itercuprod );\n\n/**\n* @name itercurange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/curange}\n*/\nimport itercurange from '@stdlib/stats-iter-curange';\nsetReadOnly( ns, 'itercurange', itercurange );\n\n/**\n* @name itercusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusum}\n*/\nimport itercusum from '@stdlib/stats-iter-cusum';\nsetReadOnly( ns, 'itercusum', itercusum );\n\n/**\n* @name itercusumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusumabs}\n*/\nimport itercusumabs from '@stdlib/stats-iter-cusumabs';\nsetReadOnly( ns, 'itercusumabs', itercusumabs );\n\n/**\n* @name itercusumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusumabs2}\n*/\nimport itercusumabs2 from '@stdlib/stats-iter-cusumabs2';\nsetReadOnly( ns, 'itercusumabs2', itercusumabs2 );\n\n/**\n* @name itermax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/max}\n*/\nimport itermax from '@stdlib/stats-iter-max';\nsetReadOnly( ns, 'itermax', itermax );\n\n/**\n* @name itermaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/maxabs}\n*/\nimport itermaxabs from '@stdlib/stats-iter-maxabs';\nsetReadOnly( ns, 'itermaxabs', itermaxabs );\n\n/**\n* @name itermean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mean}\n*/\nimport itermean from '@stdlib/stats-iter-mean';\nsetReadOnly( ns, 'itermean', itermean );\n\n/**\n* @name itermeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/meanabs}\n*/\nimport itermeanabs from '@stdlib/stats-iter-meanabs';\nsetReadOnly( ns, 'itermeanabs', itermeanabs );\n\n/**\n* @name itermeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/meanabs2}\n*/\nimport itermeanabs2 from '@stdlib/stats-iter-meanabs2';\nsetReadOnly( ns, 'itermeanabs2', itermeanabs2 );\n\n/**\n* @name itermidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/midrange}\n*/\nimport itermidrange from '@stdlib/stats-iter-midrange';\nsetReadOnly( ns, 'itermidrange', itermidrange );\n\n/**\n* @name itermin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/min}\n*/\nimport itermin from '@stdlib/stats-iter-min';\nsetReadOnly( ns, 'itermin', itermin );\n\n/**\n* @name iterminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/minabs}\n*/\nimport iterminabs from '@stdlib/stats-iter-minabs';\nsetReadOnly( ns, 'iterminabs', iterminabs );\n\n/**\n* @name itermmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmax}\n*/\nimport itermmax from '@stdlib/stats-iter-mmax';\nsetReadOnly( ns, 'itermmax', itermmax );\n\n/**\n* @name itermmaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmaxabs}\n*/\nimport itermmaxabs from '@stdlib/stats-iter-mmaxabs';\nsetReadOnly( ns, 'itermmaxabs', itermmaxabs );\n\n/**\n* @name itermmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmean}\n*/\nimport itermmean from '@stdlib/stats-iter-mmean';\nsetReadOnly( ns, 'itermmean', itermmean );\n\n/**\n* @name itermmeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmeanabs}\n*/\nimport itermmeanabs from '@stdlib/stats-iter-mmeanabs';\nsetReadOnly( ns, 'itermmeanabs', itermmeanabs );\n\n/**\n* @name itermmeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmeanabs2}\n*/\nimport itermmeanabs2 from '@stdlib/stats-iter-mmeanabs2';\nsetReadOnly( ns, 'itermmeanabs2', itermmeanabs2 );\n\n/**\n* @name itermmidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmidrange}\n*/\nimport itermmidrange from '@stdlib/stats-iter-mmidrange';\nsetReadOnly( ns, 'itermmidrange', itermmidrange );\n\n/**\n* @name itermmin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmin}\n*/\nimport itermmin from '@stdlib/stats-iter-mmin';\nsetReadOnly( ns, 'itermmin', itermmin );\n\n/**\n* @name itermminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mminabs}\n*/\nimport itermminabs from '@stdlib/stats-iter-mminabs';\nsetReadOnly( ns, 'itermminabs', itermminabs );\n\n/**\n* @name itermprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mprod}\n*/\nimport itermprod from '@stdlib/stats-iter-mprod';\nsetReadOnly( ns, 'itermprod', itermprod );\n\n/**\n* @name itermrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mrange}\n*/\nimport itermrange from '@stdlib/stats-iter-mrange';\nsetReadOnly( ns, 'itermrange', itermrange );\n\n/**\n* @name itermsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msum}\n*/\nimport itermsum from '@stdlib/stats-iter-msum';\nsetReadOnly( ns, 'itermsum', itermsum );\n\n/**\n* @name itermsumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msumabs}\n*/\nimport itermsumabs from '@stdlib/stats-iter-msumabs';\nsetReadOnly( ns, 'itermsumabs', itermsumabs );\n\n/**\n* @name itermsumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msumabs2}\n*/\nimport itermsumabs2 from '@stdlib/stats-iter-msumabs2';\nsetReadOnly( ns, 'itermsumabs2', itermsumabs2 );\n\n/**\n* @name iterprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/prod}\n*/\nimport iterprod from '@stdlib/stats-iter-prod';\nsetReadOnly( ns, 'iterprod', iterprod );\n\n/**\n* @name iterrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/range}\n*/\nimport iterrange from '@stdlib/stats-iter-range';\nsetReadOnly( ns, 'iterrange', iterrange );\n\n/**\n* @name iterstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/stdev}\n*/\nimport iterstdev from '@stdlib/stats-iter-stdev';\nsetReadOnly( ns, 'iterstdev', iterstdev );\n\n/**\n* @name itersum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sum}\n*/\nimport itersum from '@stdlib/stats-iter-sum';\nsetReadOnly( ns, 'itersum', itersum );\n\n/**\n* @name itersumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sumabs}\n*/\nimport itersumabs from '@stdlib/stats-iter-sumabs';\nsetReadOnly( ns, 'itersumabs', itersumabs );\n\n/**\n* @name itersumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sumabs2}\n*/\nimport itersumabs2 from '@stdlib/stats-iter-sumabs2';\nsetReadOnly( ns, 'itersumabs2', itersumabs2 );\n\n/**\n* @name itervariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/variance}\n*/\nimport itervariance from '@stdlib/stats-iter-variance';\nsetReadOnly( ns, 'itervariance', itervariance );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrgmean from '@stdlib/stats-incr-gmean';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercugmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercugmean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrgmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercugmean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercugmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a geometric mean.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrgmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator();\n* // returns ~3.16\n*/\nfunction incrgmean() {\n\tvar sum;\n\tvar N;\n\tvar v;\n\n\tsum = 0.0;\n\tN = 0;\n\tv = 1;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated geometric mean. If not provided a value, the accumulator function returns the current geometric mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} geometric mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn v;\n\t\t}\n\t\tN += 1;\n\t\tsum += ln( x );\n\t\tv = exp( sum/N );\n\t\treturn v;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrgmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrhmean from '@stdlib/stats-incr-hmean';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuhmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuhmean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrhmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuhmean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercuhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrmean from '@stdlib/stats-incr-mean';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a harmonic mean.\n*\n* ## Method\n*\n* -   The harmonic mean of positive real numbers \\\\(x_0, x_1, \\ldots, x_{n-1}\\\\) is defined as\n*\n*     ```tex\n*     \\begin{align*}\n*     H &= \\frac{n}{\\frac{1}{x_0} + \\frac{1}{x_1} + \\cdots + \\frac{1}{x_{n-1}}} \\\\\n*       &= \\frac{n}{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}\n*     \\end{align*}\n*     ```\n*\n*     which may be expressed\n*\n*     ```tex\n*     H = \\biggl( \\frac{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}{n} \\biggr)^{-1}\n*     ```\n*\n* -   Accordingly, to compute the harmonic mean incrementally, we can simply compute the arithmetic mean of reciprocal values and then compute the reciprocal of the result.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrhmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator();\n* // returns ~2.86\n*/\nfunction incrhmean() {\n\tvar mean = incrmean();\n\tvar v;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated harmonic mean. If not provided a value, the accumulator function returns the current harmonic mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} harmonic mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( v === void 0 ) ? null : v;\n\t\t}\n\t\tv = 1.0 / mean( 1.0/x );\n\t\treturn v;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmax from '@stdlib/stats-incr-max';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative maximum value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumax( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumax( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmax();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumax( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmaxabs from '@stdlib/stats-incr-maxabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative maximum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumaxabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumaxabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmaxabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumaxabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercumaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmean from '@stdlib/stats-incr-mean';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercumean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmeanabs from '@stdlib/stats-incr-meanabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumeanabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmeanabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumeanabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercumeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmeanabs2 from '@stdlib/stats-incr-meanabs2';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumeanabs2( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmeanabs2();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumeanabs2( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercumeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmidrange from '@stdlib/stats-incr-midrange';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative mid-range.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumidrange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumidrange( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmidrange();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumidrange( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercumidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmin from '@stdlib/stats-incr-min';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative minimum value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumin( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumin( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrmin();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumin( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrminabs from '@stdlib/stats-incr-minabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative minimum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuminabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuminabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrminabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuminabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercuminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrprod from '@stdlib/stats-incr-prod';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative product.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuprod( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuprod( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrprod();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuprod( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercuprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrrange from '@stdlib/stats-incr-range';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative range.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercurange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercurange( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrrange();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercurange( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercurange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrsum from '@stdlib/stats-incr-sum';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusum( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusum( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrsum();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusum( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrsumabs from '@stdlib/stats-incr-sumabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusumabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrsumabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusumabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercusumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrsumabs2 from '@stdlib/stats-incr-sumabs2';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusumabs2( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `' + iterator + '`.' );\n\t}\n\tacc = incrsumabs2();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusumabs2( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itercusumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrmax from '@stdlib/stats-incr-max';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} maximum value\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermax( rand );\n* // returns <number>\n*/\nfunction itermax( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmax();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itermax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrmaxabs from '@stdlib/stats-incr-maxabs';\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} maximum absolute value\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermaxabs( rand );\n* // returns <number>\n*/\nfunction itermaxabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmaxabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itermaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrmean from '@stdlib/stats-incr-mean';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermean( rand );\n* // returns <number>\n*/\nfunction itermean( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmean();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itermean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrmeanabs from '@stdlib/stats-incr-meanabs';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean of absolute values\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs( rand );\n* // returns <number>\n*/\nfunction itermeanabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmeanabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itermeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrmeanabs2 from '@stdlib/stats-incr-meanabs2';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of squared absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean of squared absolute values\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs2( rand );\n* // returns <number>\n*/\nfunction itermeanabs2( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmeanabs2();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itermeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrmidrange from '@stdlib/stats-incr-midrange';\n\n\n// MAIN //\n\n/**\n* Computes the mid-range of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} mid-range\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = itermidrange( rand );\n* // returns <number>\n*/\nfunction itermidrange( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmidrange();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itermidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrmin from '@stdlib/stats-incr-min';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} minimum value\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermin( rand );\n* // returns <number>\n*/\nfunction itermin( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrmin();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itermin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrminabs from '@stdlib/stats-incr-minabs';\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} minimum absolute value\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = iterminabs( rand );\n* // returns <number>\n*/\nfunction iterminabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrminabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default iterminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmmax from '@stdlib/stats-incr-mmax';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving maximum value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmax( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmax( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmax( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmax( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmmaxabs from '@stdlib/stats-incr-mmaxabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving maximum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmaxabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmaxabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmaxabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmaxabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport incrmmax from '@stdlib/stats-incr-mmax';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum absolute value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmaxabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 5.0\n*\n* m = accumulator( 3.0 );\n* // returns 5.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmaxabs( W ) {\n\tvar max;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmax = incrmmax( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn max();\n\t\t}\n\t\treturn max( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmmean from '@stdlib/stats-incr-mmean';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmean( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmean( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmean( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmean( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmmeanabs from '@stdlib/stats-incr-mmeanabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmeanabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmeanabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmeanabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport incrmmean from '@stdlib/stats-incr-mmean';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean of absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanabs( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator( 3.0 );\n* // returns ~3.33\n*\n* mu = accumulator( 5.0 );\n* // returns ~4.33\n*\n* mu = accumulator();\n* // returns ~4.33\n*/\nfunction incrmmeanabs( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmmeanabs2 from '@stdlib/stats-incr-mmeanabs2';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmeanabs2( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmeanabs2( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmeanabs2( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport incrmmean from '@stdlib/stats-incr-mmean';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean of squared absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanabs2( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator( 3.0 );\n* // returns ~12.67\n*\n* m = accumulator( 5.0 );\n* // returns ~19.67\n*\n* m = accumulator();\n* // returns ~19.67\n*/\nfunction incrmmeanabs2( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmmidrange from '@stdlib/stats-incr-mmidrange';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving mid-range.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmidrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmidrange( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmidrange( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmidrange( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mid-range.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmidrange( 3 );\n*\n* var mr = accumulator();\n* // returns null\n*\n* mr = accumulator( 2.0 );\n* // returns 2.0\n*\n* mr = accumulator( -5.0 );\n* // returns -1.5\n*\n* mr = accumulator( 3.0 );\n* // returns -1.0\n*\n* mr = accumulator( 5.0 );\n* // returns 0.0\n*\n* mr = accumulator();\n* // returns 0.0\n*/\nfunction incrmmidrange( W ) {\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mid-range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ( max+min ) / 2.0;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 0.0; // normalizes +-0\n\t\t}\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\treturn ( max+min ) / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmmin from '@stdlib/stats-incr-mmin';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving minimum value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmin( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmin( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmmin( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmin( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmminabs from '@stdlib/stats-incr-mminabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving minimum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermminabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermminabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmminabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermminabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport incrmmin from '@stdlib/stats-incr-mmin';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving minimum absolute value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmminabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 2.0\n*\n* m = accumulator( 5.0 );\n* // returns 3.0\n*\n* m = accumulator();\n* // returns 3.0\n*/\nfunction incrmminabs( W ) {\n\tvar min;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tmin = incrmmin( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} minimum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn min();\n\t\t}\n\t\treturn min( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmprod from '@stdlib/stats-incr-mprod';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving product.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermprod( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermprod( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmprod( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermprod( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmrange from '@stdlib/stats-incr-mrange';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving range.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermrange( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmrange( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermrange( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving range.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmrange( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0 );\n* // returns 7.0\n*\n* r = accumulator( 3.0 );\n* // returns 8.0\n*\n* r = accumulator( 5.0 );\n* // returns 10.0\n*\n* r = accumulator();\n* // returns 10.0\n*/\nfunction incrmrange( W ) {\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max - min;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 0.0; // normalizes +-0\n\t\t}\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find a new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\treturn max - min;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmsum from '@stdlib/stats-incr-msum';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsum( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsum( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmsum( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsum( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmsumabs from '@stdlib/stats-incr-msumabs';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsumabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmsumabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsumabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport incrmsum from '@stdlib/stats-incr-msum';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum of absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsumabs( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator( 3.0 );\n* // returns 10.0\n*\n* sum = accumulator( 5.0 );\n* // returns 13.0\n*\n* sum = accumulator();\n* // returns 13.0\n*/\nfunction incrmsumabs( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport incrmsumabs2 from '@stdlib/stats-incr-msumabs2';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsumabs2( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `' + iterator + '`.' );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Second argument must be a positive integer. Value: `' + W + '`.' );\n\t}\n\tacc = incrmsumabs2( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsumabs2( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default itermsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport incrmsum from '@stdlib/stats-incr-msum';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum of squared absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsumabs2( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator( 3.0 );\n* // returns 38.0\n*\n* sum = accumulator( 5.0 );\n* // returns 59.0\n*\n* sum = accumulator();\n* // returns 59.0\n*/\nfunction incrmsumabs2( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a positive integer. Value: `' + W + '`.' );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrprod from '@stdlib/stats-incr-prod';\n\n\n// MAIN //\n\n/**\n* Computes the product of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} product\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var p = iterprod( rand );\n* // returns <number>\n*/\nfunction iterprod( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrprod();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default iterprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrrange from '@stdlib/stats-incr-range';\n\n\n// MAIN //\n\n/**\n* Computes the range of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} range\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = iterrange( rand );\n* // returns <number>\n*/\nfunction iterrange( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrrange();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default iterrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport incrstdev from '@stdlib/stats-incr-stdev';\n\n\n// MAIN //\n\n/**\n* Computes the corrected sample standard deviation over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} corrected sample standard deviation\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = iterstdev( rand );\n* // returns <number>\n*/\nfunction iterstdev( iterator, mean ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tacc = incrstdev( mean );\n\t} else {\n\t\tacc = incrstdev();\n\t}\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default iterstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrsum from '@stdlib/stats-incr-sum';\n\n\n// MAIN //\n\n/**\n* Computes the sum of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersum( rand );\n* // returns <number>\n*/\nfunction itersum( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrsum();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itersum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrsumabs from '@stdlib/stats-incr-sumabs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum of absolute values\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs( rand );\n* // returns <number>\n*/\nfunction itersumabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrsumabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itersumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport incrsumabs2 from '@stdlib/stats-incr-sumabs2';\n\n\n// MAIN //\n\n/**\n* Computes the sum of squared absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum of squared absolute values\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs2( rand );\n* // returns <number>\n*/\nfunction itersumabs2( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide an iterator. Value: `'+iterator+'`.' );\n\t}\n\tacc = incrsumabs2();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itersumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport incrvariance from '@stdlib/stats-incr-variance';\n\n\n// MAIN //\n\n/**\n* Computes the unbiased sample variance over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} unbiased sample variance\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s2 = itervariance( rand );\n* // returns <number>\n*/\nfunction itervariance( iterator, mean ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an iterator. Value: `'+iterator+'`.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Second argument must be a number primitive. Value: `' + mean + '`.' );\n\t\t}\n\t\tacc = incrvariance( mean );\n\t} else {\n\t\tacc = incrvariance();\n\t}\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itervariance;\n"],"names":["main","Object","defineProperty","objectProtoype","prototype","toStr","toString","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","call","TypeError","__proto__","value","Error","get","set","defineProperty$1","setReadOnly","configurable","enumerable","writable","setNonEnumerableReadOnly","RE","isBoolean","FLG","Symbol","hasToStringTagSupport","toStringTag","has","hasOwnProperty","hasOwnProp","property","toStrTag","nativeClass$1","hasToStringTag","v","isOwn","tag","out","Boolean","test","nativeClass","isPrimitive","isObject","getGlobal","Function","self","window","global","root","codegen","arguments","length","getThis","Self","Win","Global","nodeList","document","childNodes","typedarray","Int8Array","reFunctionName","RE_FUNCTION_NAME","REGEXP","isArray$2","Array","isArray","isObjectLike","constructorName","match","name","ctor","slice","constructor","exec","_isBuffer","isBuffer","predicate","len","i","arrayfun","ctorName","toLowerCase","type","isFunction","typeOf","isIteratorLike","t","next","IteratorSymbol","iterator","hasUint32Array","Uint32Array","bool","arr","GlobalUint32Array","UINT32_MAX","hasUint32ArraySupport","Uint32Array$1","hasFloat64Array","Float64Array","GlobalFloat64Array","NaN","hasFloat64ArraySupport","Float64Array$1","hasUint8Array","Uint8Array","GlobalUint8Array","UINT8_MAX","hasUint8ArraySupport","Uint8Array$1","hasUint16Array","Uint16Array","GlobalUint16Array","UINT16_MAX","hasUint16ArraySupport","uint16view","ctors","uint16","uint8","IS_LITTLE_ENDIAN","buffer","HIGH$7","isLittleEndian","FLOAT64_VIEW","UINT32_VIEW","getHighWord","x","HIGH","HIGH$5","isnan","FLOAT64_EXPONENT_BIAS","Number$1","Number","FLOAT64_NINF","NEGATIVE_INFINITY","LN2_HI","LN2_LO","HIGH_SIGNIFICAND_MASK","ln","hfsq","hx","t2","t1","k","R","f","j","s","w","z","NINF","BIAS","high","setHighWord","polyvalP","polyvalQ","floor","Math","ceil","trunc","FLOAT64_PINF","POSITIVE_INFINITY","isInfinite","PINF","LOW","indices$3","indices","toWords","stride","offset","fcn","assign","indices$1","fromWords","low","WORDS","abs","normalize","exponent","FRAC","ldexp","frac","exp","m","y","hy","floatExp","LOG2_E","NEARZERO","hi","lo","r","c","expmulti","incrmean","mu","N","isPositiveZero","incrmax","max","incrmaxabs","incrmeanabs","mean","incrmeanabs2","incrmidrange","sum","min","isNegativeZero","incrmin","incrminabs","X","frexp","PARTS","incrprod","prod","incrrange","range","incrsum","ccs","cs","cc","incrsumabs","incrsumabs2","isNumber","isInteger","isInt","valueOf","isPositiveInteger","incrmmax","W","buf","incrmmean","delta","incrmmin","zeros","n","zeroPad","str","width","right","negative","pad","startsWithMinus","substr","lowercase","String","uppercase","toUpperCase","formatInteger","token","base","specifier","arg","parseInt","isFinite","precision","padRight","sign","alternate","charAt","isString","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","digits","parseFloat","toExponential","toFixed","toPrecision","spaces","spacePad","fromCharCode","isNaN","initialize","flags","mapping","formatInterpolate","tokens","hasPeriod","flag","num","pos","padZeros","indexOf","maxWidth","substring","parse","formatTokenize","content","prev","lastIndex","push","format","args","tokenize","interpolate","apply","product","workspace","acc","incrmprod","parts","incrmsum","sqrt","incrstdev","M2","accumulator2","accumulator1","incrvariance","ns","itercugmean","iter","done","iteratorSymbol","itercuhmean","itercumax","itercumaxabs","itercumean","itercumeanabs","itercumeanabs2","itercumidrange","itercumin","itercuminabs","itercuprod","itercurange","itercusum","itercusumabs","itercusumabs2","itermmax","itermmaxabs","incrmmaxabs","itermmean","itermmeanabs","incrmmeanabs","itermmeanabs2","incrmmeanabs2","itermmidrange","incrmmidrange","itermmin","itermminabs","incrmminabs","itermprod","itermrange","incrmrange","itermsum","itermsumabs","incrmsumabs","itermsumabs2","incrmsumabs2"],"mappings":"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"}